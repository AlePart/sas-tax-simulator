{"version":3,"file":"static/js/807.ead536ab.chunk.js","mappings":"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","sources":["components/UI/Card.js","components/UI/InfoBox.js","components/SASTaxSimulator/utils.js","components/SASTaxSimulator/AziendaForm.js","components/SASTaxSimulator/SocioForm.js","components/SASTaxSimulator/SocioList.js","components/SASTaxSimulator/SocioResults.js","components/SASTaxSimulator/ReportCharts.js","components/UI/Sidebar.js","utils/autoSaveUtils.js","utils/cookieUtils.js","components/UI/SessionControls.js","components/UI/LoadingIndicator.js","components/SASTaxSimulator/index.js"],"sourcesContent":["import React from 'react';\n\n/**\n * Componente Card per il layout delle sezioni\n * @param {Object} props - Props del componente\n * @param {React.ReactNode|string} props.title - Titolo della card\n * @param {React.ReactNode} props.children - Contenuto della card\n * @param {string} props.className - Classi CSS aggiuntive\n */\nconst Card = ({ title, children, className = '' }) => {\n    return (\n        <div className={`mb-6 p-4 bg-white rounded-lg shadow ${className}`}>\n            <h2 className=\"text-xl font-semibold mb-4\">{title}</h2>\n            {children}\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\n\n/**\n * Componente per visualizzare un valore con label\n * @param {Object} props - Props del componente\n * @param {string} props.label - Label da visualizzare\n * @param {string|number} props.value - Valore da visualizzare\n * @param {string} props.bgColor - Colore di sfondo (default: bg-blue-50)\n * @param {string} props.className - Classi CSS aggiuntive\n */\nconst InfoBox = ({ label, value, bgColor = 'bg-blue-50', className = '' }) => {\n    return (\n        <div className={`p-3 ${bgColor} rounded ${className}`}>\n            <span className=\"text-sm text-gray-600\">{label}</span>\n            <p className=\"text-lg font-semibold\">{value}</p>\n        </div>\n    );\n};\n\nexport default InfoBox;","/**\n * Utility per il simulatore di tassazione SAS\n */\n\n/**\n * Formatta un valore numerico come valuta euro\n * @param {number} value - Valore da formattare\n * @returns {string} Valore formattato come valuta\n */\nexport const formatCurrency = (value) => {\n    return new Intl.NumberFormat('it-IT', {\n        style: 'currency',\n        currency: 'EUR'\n    }).format(value);\n};\n\n/**\n * Crea un nuovo oggetto socio con valori predefiniti\n * @param {number} id - ID univoco del socio\n * @param {string} nome - Nome del socio\n * @returns {Object} Nuovo oggetto socio con propriet� predefinite\n */\nexport const creaNuovoSocio = (id, nome = \"Nuovo Socio\") => {\n    return {\n        id,\n        nome,\n        tipo: \"operativo\", // Default: socio operativo\n        percentuale: 50,\n        redditoEsterno: 0,\n        giornateLavorate: 220,\n        buoniPasto: false,\n        valoreBuoniPasto: 8,\n        trasferte: false,\n        giorniTrasferta: 0,\n        importoTrasfertaGiorno: 50,\n        trasfertaEsenteFino: 46.48 // Soglia di esenzione trasferte, default 46.48�\n    };\n};\n\n/**\n * Calcola i costi legati ai soci operativi (buoni pasto e trasferte)\n * @param {Array} soci - Array di soci\n * @returns {Object} Costi totali e dettaglio costi esenti e non esenti\n */\nexport const calcolaCostiSociOperativi = (soci) => {\n    let totaleCosti = 0;\n    let costiBuoniPastoEsenti = 0;\n    let costiBuoniPastoNonEsenti = 0;\n    let costiTrasferteEsenti = 0;\n    let costiTrasferteNonEsenti = 0;\n\n    // Calcola i costi per i buoni pasto e trasferte\n    soci.forEach(socio => {\n        if (socio.tipo === \"operativo\") {\n            // Calcolo buoni pasto\n            if (socio.buoniPasto) {\n                ({ costiBuoniPastoEsenti, costiBuoniPastoNonEsenti, totaleCosti } = CalcolaBuoniPasto(socio, costiBuoniPastoEsenti, costiBuoniPastoNonEsenti, totaleCosti));\n            }\n\n            // Calcolo trasferte\n            if (socio.trasferte) {\n                const totaleTrasferte = socio.importoTrasfertaGiorno * socio.giorniTrasferta;\n                // Gestione della soglia di esenzione per le trasferte\n                const valoreTrasferteGiornaliero = socio.importoTrasfertaGiorno;\n                const sogliaTrasferte = socio.trasfertaEsenteFino || 46.48; // Default 46.48� se non specificato\n\n                if (valoreTrasferteGiornaliero <= sogliaTrasferte) {\n                    // Se il valore � sotto la soglia, tutto � esente\n                    costiTrasferteEsenti += totaleTrasferte;\n                } else {\n                    // Se supera la soglia, dividiamo tra esente e non esente\n                    costiTrasferteEsenti += sogliaTrasferte * socio.giorniTrasferta;\n                    costiTrasferteNonEsenti += (valoreTrasferteGiornaliero - sogliaTrasferte) * socio.giorniTrasferta;\n                }\n\n                totaleCosti += totaleTrasferte;\n            }\n        }\n    });\n\n    return {\n        totale: totaleCosti,\n        dettaglio: {\n            buoniPastoEsenti: costiBuoniPastoEsenti,\n            buoniPastoNonEsenti: costiBuoniPastoNonEsenti,\n            trasferteEsenti: costiTrasferteEsenti,\n            trasferteNonEsenti: costiTrasferteNonEsenti\n        }\n    };\n};\n\n/**\n * Calcola il reddito imponibile totale di un socio\n * @param {Object} socio - Oggetto socio\n * @param {number} quotaUtile - Quota di utile aziendale spettante\n * @param {number} importoBuoniPastoNonEsenti - Importo buoni pasto non esenti\n * @param {number} importoTrasferteNonEsenti - Importo rimborsi trasferta non esenti\n * @returns {number} Reddito imponibile totale\n */\nconst calcolaRedditoImponibileTotale = (socio, quotaUtile, importoBuoniPastoNonEsenti, importoTrasferteNonEsenti) => {\n    // Reddito da SAS + Reddito esterno + Importi non esenti\n    return quotaUtile + socio.redditoEsterno + importoBuoniPastoNonEsenti + importoTrasferteNonEsenti;\n};\n\n/**\n * Calcola i contributi INPS di un socio\n * @param {number} quotaUtile - Quota di utile aziendale spettante\n * @param {number} aliquotaInps - Aliquota INPS in percentuale\n * @returns {number} Contributi INPS\n */\nconst calcolaContributiInps = (quotaUtile, aliquotaInps) => {\n    return quotaUtile * (aliquotaInps / 100);\n};\n\n/**\n * Calcola l'IRPEF sulla base degli scaglioni e del reddito imponibile\n * @param {number} reddito - Reddito imponibile totale\n * @returns {number} IRPEF da versare\n */\nconst calcolaIrpef = (reddito) => {\n    if (reddito <= 15000) {\n        return reddito * 0.23;\n    } else if (reddito <= 28000) {\n        return 15000 * 0.23 + (reddito - 15000) * 0.25;\n    } else if (reddito <= 50000) {\n        return 15000 * 0.23 + 13000 * 0.25 + (reddito - 28000) * 0.35;\n    } else {\n        return 15000 * 0.23 + 13000 * 0.25 + 22000 * 0.35 + (reddito - 50000) * 0.43;\n    }\n};\n\n/**\n * Calcola l'addizionale regionale sulla base dell'aliquota\n * @param {number} redditoImponibile - Reddito imponibile totale\n * @param {number} aliquota - Aliquota addizionale regionale\n * @returns {number} Addizionale regionale da versare\n */\nconst calcolaAddizionaleRegionale = (redditoImponibile, aliquota) => {\n    return redditoImponibile * (aliquota / 100);\n};\n\n/**\n * Calcola l'addizionale comunale sulla base dell'aliquota\n * @param {number} redditoImponibile - Reddito imponibile totale\n * @param {number} aliquota - Aliquota addizionale comunale\n * @returns {number} Addizionale comunale da versare\n */\nconst calcolaAddizionaleComunale = (redditoImponibile, aliquota) => {\n    return redditoImponibile * (aliquota / 100);\n};\n\n/**\n * Calcola i risultati fiscali di un socio\n * @param {Object} socio - Oggetto socio\n * @param {number} utileAziendale - Utile aziendale dopo IRAP\n * @param {number} aliquotaInps - Aliquota INPS in percentuale\n * @param {Array} scaglioniIrpef - Array di scaglioni IRPEF\n * @param {number} aliqRegionale - Aliquota addizionale regionale\n * @param {number} aliqComunale - Aliquota addizionale comunale\n * @returns {Object} Risultati fiscali per il socio\n */\nexport const calcolaRisultatiSocio = (\n    socio,\n    utileAziendale,\n    aliquotaInps,\n    scaglioniIrpef,\n    aliqRegionale,\n    aliqComunale\n) => {\n    // Calcola la quota di utile\n    const quotaUtile = utileAziendale * (socio.percentuale / 100);\n\n    // Calcola gli importi totali dei buoni pasto e trasferte\n    let importoBuoniPasto = 0;\n    let importoBuoniPastoEsenti = 0;\n    let importoBuoniPastoNonEsenti = 0;\n    let importoTrasferte = 0;\n    let importoTrasferteEsenti = 0;\n    let importoTrasferteNonEsenti = 0;\n\n    let contributiInps = 0;\n    if (socio.tipo === \"operativo\") {\n        // Buoni pasto\n        if (socio.buoniPasto) {\n            //const totaleBuoni = socio.valoreBuoniPasto * socio.giornateLavorate;\n            //importoBuoniPasto = totaleBuoni;\n\n            //// Calcola la parte esente e non esente\n            //const sogliaBuoni = socio.buoniPastoEsentiFino || 8; // Default 8�\n            //if (socio.valoreBuoniPasto <= sogliaBuoni) {\n            //    importoBuoniPastoEsenti = totaleBuoni;\n            //    importoBuoniPastoNonEsenti = 0;\n            //} else {\n            //    importoBuoniPastoEsenti = sogliaBuoni * socio.giornateLavorate;\n            //    importoBuoniPastoNonEsenti = (socio.valoreBuoniPasto - sogliaBuoni) * socio.giornateLavorate;\n            //}\n            let costiBuoniPastoEsenti = 0;\n            let costiBuoniPastoNonEsenti = 0;\n            let totaleCosti = 0;\n            ({ costiBuoniPastoEsenti, costiBuoniPastoNonEsenti, totaleCosti } = CalcolaBuoniPasto(socio, costiBuoniPastoEsenti, costiBuoniPastoNonEsenti, totaleCosti));\n            importoTrasferteEsenti = costiBuoniPastoEsenti;\n            importoTrasferteNonEsenti = costiBuoniPastoNonEsenti;\n            importoBuoniPasto = totaleCosti;\n        }\n\n        // Trasferte\n        if (socio.trasferte) {\n            const totaleTrasferte = socio.importoTrasfertaGiorno * socio.giorniTrasferta;\n            importoTrasferte = totaleTrasferte;\n\n            // Calcola la parte esente e non esente\n            const sogliaTrasferte = socio.trasfertaEsenteFino || 46.48; // Default 46.48�\n            if (socio.importoTrasfertaGiorno <= sogliaTrasferte) {\n                importoTrasferteEsenti = totaleTrasferte;\n                importoTrasferteNonEsenti = 0;\n            } else {\n                importoTrasferteEsenti = sogliaTrasferte * socio.giorniTrasferta;\n                importoTrasferteNonEsenti = (socio.importoTrasfertaGiorno - sogliaTrasferte) * socio.giorniTrasferta;\n            }\n        }\n\n        contributiInps = calcolaContributiInps(quotaUtile, aliquotaInps);\n    }\n\n    \n    \n\n    // Calcola il reddito imponibile totale\n    const redditoImponibileTotale = calcolaRedditoImponibileTotale(\n        socio,\n        quotaUtile,\n        importoBuoniPastoNonEsenti,\n        importoTrasferteNonEsenti\n    );\n\n    // Calcola IRPEF \n\n    const irpef = calcolaIrpef(redditoImponibileTotale) - calcolaIrpef(socio.redditoEsterno);\n\n    // Calcola addizionali\n    const addizionaleRegionale = calcolaAddizionaleRegionale(quotaUtile, aliqRegionale);\n    const addizionaleComunale = calcolaAddizionaleComunale(quotaUtile, aliqComunale);\n\n    // Calcola totale imposte\n    const totaleImposte = contributiInps + irpef + addizionaleRegionale + addizionaleComunale;\n\n    // Calcola il netto percepito\n    // Quota utile - imposte + parte esente di buoni pasto e trasferte\n    const nettoPercepito = quotaUtile - totaleImposte + importoBuoniPastoEsenti + importoTrasferteEsenti;\n\n    return {\n        socio,\n        quotaUtile,\n        importoBuoniPasto,\n        importoBuoniPastoEsenti,\n        importoBuoniPastoNonEsenti,\n        importoTrasferte,\n        importoTrasferteEsenti,\n        importoTrasferteNonEsenti,\n        contributiInps,\n        redditoImponibileTotale,\n        irpef,\n        addizionaleRegionale,\n        addizionaleComunale,\n        totaleImposte,\n        nettoPercepito\n    };\n};\n\n/**\n * Calcola la somma totale di una propriet� per tutti i soci\n * @param {Array} risultatiSoci - Array di risultati dei soci\n * @param {string} proprieta - Propriet� da sommare\n * @returns {number} Somma totale della propriet�\n */\nexport const calcolaTotaleSoci = (risultatiSoci, proprieta) => {\n    return risultatiSoci.reduce((acc, risultato) => acc + risultato[proprieta], 0);\n};\n\nfunction CalcolaBuoniPasto(socio, costiBuoniPastoEsenti, costiBuoniPastoNonEsenti, totaleCosti) {\n    const totaleBuoniPasto = socio.valoreBuoniPasto * socio.giornateLavorate;\n    costiBuoniPastoEsenti += socio.valoreBuoniPasto * socio.giornateLavorate * 0.75;\n    costiBuoniPastoNonEsenti += costiBuoniPastoEsenti * (0.25);\n    totaleCosti += totaleBuoniPasto;\n    return { costiBuoniPastoEsenti, costiBuoniPastoNonEsenti, totaleCosti };\n}\n","import React from 'react';\nimport Card from '../UI/Card';\nimport InfoBox from '../UI/InfoBox';\nimport { formatCurrency } from './utils';\n/**\n * Form per i dati aziendali\n */\nconst AziendaForm = ({\n    fatturato,\n    setFatturato,\n    costi,\n    setCosti,\n    aliquotaIrap,\n    setAliquotaIrap,\n    aliquotaInps,\n    setAliquotaInps,\n    utileAziendale,\n    irap,\n    utileDopoIrap,\n    costiSociOperativi,\n    costiEsenti,\n    costiNonEsenti\n}) => {\n    return (\n        <Card title=\"Dati Aziendali\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Fatturato Aziendale (&euro;)\n                    </label>\n                    <input\n                        type=\"number\"\n                        value={fatturato}\n                        onChange={(e) => setFatturato(Number(e.target.value))}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Costi Aziendali Base (&euro;)\n                    </label>\n                    <input\n                        type=\"number\"\n                        value={costi}\n                        onChange={(e) => setCosti(Number(e.target.value))}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Aliquota IRAP (%)\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"0.1\"\n                        value={aliquotaIrap}\n                        onChange={(e) => setAliquotaIrap(Number(e.target.value))}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Aliquota INPS (%)\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"0.1\"\n                        value={aliquotaInps}\n                        onChange={(e) => setAliquotaInps(Number(e.target.value))}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <InfoBox\n                    label=\"Costi Soci Operativi Totali:\"\n                    value={formatCurrency(costiSociOperativi)}\n                />\n                <InfoBox\n                    label=\"di cui Esenti:\"\n                    value={formatCurrency(costiEsenti)}\n                    bgColor=\"bg-green-50\"\n                />\n                <InfoBox\n                    label=\"di cui Non Esenti:\"\n                    value={formatCurrency(costiNonEsenti)}\n                    bgColor=\"bg-yellow-50\"\n                />\n            </div>\n\n            <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <InfoBox\n                    label=\"Utile Aziendale:\"\n                    value={formatCurrency(utileAziendale)}\n                />\n                <InfoBox\n                    label={`IRAP (${aliquotaIrap}%):`}\n                    value={formatCurrency(irap)}\n                />\n                <InfoBox\n                    label=\"Utile dopo IRAP:\"\n                    value={formatCurrency(utileDopoIrap)}\n                    bgColor=\"bg-green-50\"\n                />\n            </div>\n\n            <div className=\"mt-4 p-3 bg-blue-50 rounded\">\n                <p className=\"text-sm text-gray-600\">\n                    <strong>Nota:</strong> L&apos;utile aziendale &egrave; calcolato sottraendo dal fatturato i costi base e solo i costi esenti dei soci operativi.\n                    La parte non esente di buoni pasto e trasferte &egrave; invece considerata come parte del reddito imponibile dei singoli soci.\n                </p>\n            </div>\n        </Card>\n    );\n};\n\nexport default AziendaForm;","import React from 'react';\nimport Tooltip from '@mui/material/Tooltip';\nimport InfoIcon from '@mui/icons-material/Info';\n\n/**\n * Form per i dettagli del socio\n */\nconst SocioForm = ({ socio, updateSocio, rimuoviSocio }) => {\n    return (\n        <div className=\"mb-6 p-4 bg-white rounded-lg shadow\">\n            <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-medium\">{socio.nome}</h3>\n                <button\n                    onClick={() => rimuoviSocio(socio.id)}\n                    className=\"bg-red-500 text-white px-2 py-1 rounded text-sm hover:bg-red-600\"\n                >\n                    Rimuovi\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Nome Socio\n                    </label>\n                    <input\n                        type=\"text\"\n                        value={socio.nome}\n                        onChange={(e) => updateSocio(socio.id, 'nome', e.target.value)}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Tipo Socio\n                    </label>\n                    <select\n                        value={socio.tipo}\n                        onChange={(e) => updateSocio(socio.id, 'tipo', e.target.value)}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    >\n                        <option value=\"operativo\">Socio Operativo</option>\n                        <option value=\"capitale\">Socio di Capitale</option>\n                    </select>\n                </div>\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Percentuale di Partecipazione (%)\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"0.01\"\n                        value={socio.percentuale}\n                        onChange={(e) => updateSocio(socio.id, 'percentuale', Number(e.target.value))}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Reddito Esterno (&euro;)\n                    </label>\n                    <input\n                        type=\"number\"\n                        value={socio.redditoEsterno}\n                        onChange={(e) => updateSocio(socio.id, 'redditoEsterno', Number(e.target.value))}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n                {socio.tipo === \"operativo\" && (\n                    <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                            Giornate Lavorate\n                        </label>\n                        <input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"365\"\n                            value={socio.giornateLavorate}\n                            onChange={(e) => updateSocio(socio.id, 'giornateLavorate', Number(e.target.value))}\n                            className=\"w-full p-2 border border-gray-300 rounded\"\n                        />\n                    </div>\n                )}\n            </div>\n\n            {socio.tipo === \"operativo\" && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                    <div>\n                        <label className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                            <input\n                                type=\"checkbox\"\n                                checked={socio.buoniPasto}\n                                onChange={(e) => updateSocio(socio.id, 'buoniPasto', e.target.checked)}\n                                className=\"mr-2\"\n                            />\n                            Buoni Pasto\n                        </label>\n                        {socio.buoniPasto && (\n                            <div className=\"grid grid-cols-2 gap-2\">\n                                <div>\n                                    <label className=\" text-xs text-gray-600\">Valore (&euro;/giorno)</label>\n\n                                    <Tooltip title=\"Deducibilit&agrave; al 75%\" animate={{\n                                        mount: { scale: 2, y: 0 },\n                                        unmount: { scale: 0, y: 25 },\n                                      }}  placement=\"right-end\">\n                                        <InfoIcon className=\"ml-1 text-orange-400\" fontSize=\"small\"/>\n                                    </Tooltip>     \n                                    <input\n                                        type=\"number\"\n                                        min=\"0\"\n                                        step=\"0.01\"\n                                        value={socio.valoreBuoniPasto}\n                                        onChange={(e) => updateSocio(socio.id, 'valoreBuoniPasto', Number(e.target.value))}\n                                        className=\"w-full p-2 border border-gray-300 rounded\"\n                                    />\n                                    \n                                    \n                                </div>\n\n                            </div>\n                        )}\n                    </div>\n                    <div>\n                        <label className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                            <input\n                                type=\"checkbox\"\n                                checked={socio.trasferte}\n                                onChange={(e) => updateSocio(socio.id, 'trasferte', e.target.checked)}\n                                className=\"mr-2\"\n                            />\n                            Rimborsi Trasferta\n                        </label>\n                        {socio.trasferte && (\n                            <div className=\"grid grid-cols-3 gap-2\">\n                                <div>\n                                    <label className=\"block text-xs text-gray-600\">Giorni</label>\n                                    <input\n                                        type=\"number\"\n                                        min=\"0\"\n                                        value={socio.giorniTrasferta}\n                                        onChange={(e) => updateSocio(socio.id, 'giorniTrasferta', Number(e.target.value))}\n                                        className=\"w-full p-2 border border-gray-300 rounded\"\n                                    />\n                                </div>\n                                <div>\n                                    <label className=\"block text-xs text-gray-600\">&euro;/giorno</label>\n                                    <input\n                                        type=\"number\"\n                                        min=\"0\"\n                                        step=\"0.01\"\n                                        value={socio.importoTrasfertaGiorno}\n                                        onChange={(e) => updateSocio(socio.id, 'importoTrasfertaGiorno', Number(e.target.value))}\n                                        className=\"w-full p-2 border border-gray-300 rounded\"\n                                    />\n                                </div>\n                                <div>\n                                    <label className=\"block text-xs text-gray-600\">Esente fino a (&euro;)</label>\n                                    <input\n                                        type=\"number\"\n                                        min=\"0\"\n                                        step=\"0.01\"\n                                        value={socio.trasfertaEsenteFino}\n                                        onChange={(e) => updateSocio(socio.id, 'trasfertaEsenteFino', Number(e.target.value))}\n                                        className=\"w-full p-2 border border-gray-300 rounded\"\n                                    />\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SocioForm;","import React from 'react';\nimport SocioForm from './SocioForm';\nimport { creaNuovoSocio } from './utils';\n\n/**\n * Componente per la gestione dei soci\n */\nconst SocioList = ({ soci, setSoci, totalPercentuale }) => {\n    const aggiungiSocio = () => {\n        const nuovoSocio = creaNuovoSocio(\n            soci.length > 0 ? Math.max(...soci.map(s => s.id)) + 1 : 1\n        );\n        setSoci([...soci, nuovoSocio]);\n    };\n\n    const rimuoviSocio = (id) => {\n        setSoci(soci.filter(socio => socio.id !== id));\n    };\n\n    const updateSocio = (id, campo, valore) => {\n        setSoci(soci.map(socio => {\n            if (socio.id === id) {\n                return { ...socio, [campo]: valore };\n            }\n            return socio;\n        }));\n    };\n\n    return (\n        <div className=\"mb-6\">\n            <div className=\"flex justify-between items-center mb-2\">\n                <h2 className=\"text-xl font-semibold\">Soci</h2>\n                <button\n                    onClick={aggiungiSocio}\n                    className=\"bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600\"\n                >\n                    Aggiungi Socio\n                </button>\n            </div>\n\n            {totalPercentuale !== 100 && (\n                <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-2 rounded mb-4\">\n                    Attenzione: La somma delle percentuali di partecipazione &egrave; {totalPercentuale}%. Il totale deve essere 100%.\n                </div>\n            )}\n\n            {soci.map((socio) => (\n                <SocioForm\n                    key={socio.id}\n                    socio={socio}\n                    updateSocio={updateSocio}\n                    rimuoviSocio={rimuoviSocio}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default SocioList;","import React from 'react';\nimport InfoBox from '../UI/InfoBox';\nimport { formatCurrency } from './utils';\n\n/**\n * Componente per visualizzare i risultati di un socio\n */\nconst SocioResults = ({ risultato }) => {\n    const {\n        socio,\n        quotaUtile,\n        importoBuoniPasto,\n        importoBuoniPastoEsenti,\n        importoBuoniPastoNonEsenti,\n        importoTrasferte,\n        importoTrasferteEsenti,\n        importoTrasferteNonEsenti,\n        contributiInps,\n        redditoImponibileTotale,\n        irpef,\n        addizionaleRegionale,\n        addizionaleComunale,\n        totaleImposte,\n        nettoPercepito\n    } = risultato;\n\n    return (\n        <div className=\"mb-6 p-4 bg-white rounded-lg shadow\">\n            <h3 className=\"text-lg font-medium mb-2 border-b pb-2\">\n                {socio.nome} - {socio.tipo === \"operativo\" ? \"Socio Operativo\" : \"Socio di Capitale\"} ({socio.percentuale}%)\n            </h3>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                <InfoBox\n                    label=\"Quota Utile:\"\n                    value={formatCurrency(quotaUtile)}\n                />\n\n                {socio.tipo === \"operativo\" && (\n                    <>\n                        <InfoBox\n                            label=\"Buoni Pasto Totali:\"\n                            value={formatCurrency(importoBuoniPasto)}\n                        />\n                        <InfoBox\n                            label=\"Rimborsi Trasferta Totali:\"\n                            value={formatCurrency(importoTrasferte)}\n                        />\n                    </>\n                )}\n            </div>\n\n            {socio.tipo === \"operativo\" && importoBuoniPasto > 0 && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                    <InfoBox\n                        label=\"Buoni Pasto Esenti:\"\n                        value={formatCurrency(importoBuoniPastoEsenti)}\n                        bgColor=\"bg-green-50\"\n                    />\n                    <InfoBox\n                        label=\"Buoni Pasto Non Esenti:\"\n                        value={formatCurrency(importoBuoniPastoNonEsenti)}\n                        bgColor=\"bg-yellow-50\"\n                    />\n                </div>\n            )}\n\n            {socio.tipo === \"operativo\" && importoTrasferte > 0 && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                    <InfoBox\n                        label=\"Trasferte Esenti:\"\n                        value={formatCurrency(importoTrasferteEsenti)}\n                        bgColor=\"bg-green-50\"\n                    />\n                    <InfoBox\n                        label=\"Trasferte Non Esenti:\"\n                        value={formatCurrency(importoTrasferteNonEsenti)}\n                        bgColor=\"bg-yellow-50\"\n                    />\n                </div>\n            )}\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                <InfoBox\n                    label=\"Reddito Imponibile Totale:\"\n                    value={formatCurrency(redditoImponibileTotale)}\n                    bgColor=\"bg-blue-50\"\n                />\n                <InfoBox\n                    label=\"Contributi INPS:\"\n                    value={formatCurrency(contributiInps)}\n                    bgColor=\"bg-yellow-50\"\n                />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                <InfoBox\n                    label=\"IRPEF:\"\n                    value={formatCurrency(irpef)}\n                    bgColor=\"bg-yellow-50\"\n                />\n                <InfoBox\n                    label=\"Addizionale Regionale:\"\n                    value={formatCurrency(addizionaleRegionale)}\n                    bgColor=\"bg-yellow-50\"\n                />\n                <InfoBox\n                    label=\"Addizionale Comunale:\"\n                    value={formatCurrency(addizionaleComunale)}\n                    bgColor=\"bg-yellow-50\"\n                />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <InfoBox\n                    label=\"Totale Imposte:\"\n                    value={formatCurrency(totaleImposte)}\n                    bgColor=\"bg-red-50\"\n                />\n                <InfoBox\n                    label=\"Netto Percepito:\"\n                    value={formatCurrency(nettoPercepito)}\n                    bgColor=\"bg-green-50\"\n                />\n            </div>\n\n            {socio.tipo === \"operativo\" && (\n                <div className=\"mt-3 text-xs text-gray-600 bg-gray-50 p-2 rounded\">\n                    <p>Il netto percepito include: la quota di utile al netto delle imposte, pi&ugrave; la parte esente di buoni pasto e trasferte.</p>\n                    <p>La parte non esente &egrave; inclusa nel reddito imponibile e quindi gi&agrave; considerata nel calcolo delle imposte.</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SocioResults;","import React from 'react';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport Card from '../UI/Card';\nimport { formatCurrency } from './utils';\n\n/**\n * Componente per i grafici a torta e tabella riepilogativa\n */\nconst ReportCharts = ({\n    fatturato,\n    costi,\n    costiSociOperativi,\n    costiEsenti,\n    costiNonEsenti,\n    utileAziendale,\n    irap,\n    utileDopoIrap,\n    risultatiSoci\n}) => {\n    return (\n        <Card title=\"Report Grafico\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                    <h3 className=\"text-lg font-medium mb-3\">Ripartizione Aziendale</h3>\n                    <div style={{ width: '100%', height: 300 }}>\n                        <ResponsiveContainer>\n                            <PieChart>\n                                <Pie\n                                    data={[\n                                        { name: 'Costi Base', value: costi },\n                                        { name: 'Costi Soci (Esenti)', value: costiEsenti },\n                                        { name: 'Costi Soci (Non Esenti)', value: costiNonEsenti },\n                                        { name: 'IRAP', value: irap },\n                                        { name: 'Utile Netto', value: utileDopoIrap }\n                                    ]}\n                                    cx=\"50%\"\n                                    cy=\"50%\"\n                                    labelLine={true}\n                                    outerRadius={80}\n                                    fill=\"#8884d8\"\n                                    dataKey=\"value\"\n                                    nameKey=\"name\"\n                                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                                >\n                                    <Cell fill=\"#FF8042\" />\n                                    <Cell fill=\"#00C49F\" />\n                                    <Cell fill=\"#FFBB28\" />\n                                    <Cell fill=\"#FF0000\" />\n                                    <Cell fill=\"#0088FE\" />\n                                </Pie>\n                                <Tooltip formatter={(value) => formatCurrency(value)} />\n                                <Legend />\n                            </PieChart>\n                        </ResponsiveContainer>\n                    </div>\n                </div>\n\n                <div>\n                    <h3 className=\"text-lg font-medium mb-3\">Ripartizione delle Quote</h3>\n                    <div style={{ width: '100%', height: 300 }}>\n                        <ResponsiveContainer>\n                            <PieChart>\n                                <Pie\n                                    data={risultatiSoci.map(risultato => ({\n                                        name: risultato.socio.nome,\n                                        value: risultato.quotaUtile,\n                                        tipo: risultato.socio.tipo\n                                    }))}\n                                    cx=\"50%\"\n                                    cy=\"50%\"\n                                    labelLine={true}\n                                    outerRadius={80}\n                                    fill=\"#8884d8\"\n                                    dataKey=\"value\"\n                                    nameKey=\"name\"\n                                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                                >\n                                    {risultatiSoci.map((entry, index) => (\n                                        <Cell key={`cell-${index}`} fill={entry.socio.tipo === 'operativo' ? '#0088FE' : '#00C49F'} />\n                                    ))}\n                                </Pie>\n                                <Tooltip formatter={(value) => formatCurrency(value)} />\n                                <Legend />\n                            </PieChart>\n                        </ResponsiveContainer>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"mt-4\">\n                <h3 className=\"text-lg font-medium mb-3\">Dettaglio Fiscale</h3>\n                <div className=\"overflow-x-auto\">\n                    <table className=\"min-w-full divide-y divide-gray-200\">\n                        <thead className=\"bg-gray-50\">\n                            <tr>\n                                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Voce</th>\n                                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Importo</th>\n                                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Percentuale</th>\n                            </tr>\n                        </thead>\n                        <tbody className=\"bg-white divide-y divide-gray-200\">\n                            <tr>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Fatturato</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{formatCurrency(fatturato)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">100%</td>\n                            </tr>\n                            <tr>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Costi Base</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{formatCurrency(costi)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{((costi / fatturato) * 100).toFixed(2)}%</td>\n                            </tr>\n                            <tr>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Costi Soci Operativi (Esenti)</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{formatCurrency(costiEsenti)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{((costiEsenti / fatturato) * 100).toFixed(2)}%</td>\n                            </tr>\n                            <tr>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Costi Soci Operativi (Non Esenti)</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{formatCurrency(costiNonEsenti)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{((costiNonEsenti / fatturato) * 100).toFixed(2)}%</td>\n                            </tr>\n                            <tr>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Utile Aziendale</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{formatCurrency(utileAziendale)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{((utileAziendale / fatturato) * 100).toFixed(2)}%</td>\n                            </tr>\n                            <tr>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">IRAP</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{formatCurrency(irap)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{((irap / fatturato) * 100).toFixed(2)}%</td>\n                            </tr>\n                            <tr className=\"bg-green-50\">\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Utile dopo IRAP</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-semibold\">{formatCurrency(utileDopoIrap)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-semibold\">{((utileDopoIrap / fatturato) * 100).toFixed(2)}%</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <div className=\"mt-4 p-3 bg-blue-50 rounded\">\n                <p className=\"text-sm\">\n                    <strong>Nota fiscale:</strong> I costi non esenti (parte eccedente le soglie di esenzione di buoni pasto e trasferte)\n                    sono considerati reddito del socio e non riducono l'utile aziendale. Questo riflette il trattamento fiscale corretto\n                    secondo la normativa italiana.\n                </p>\n            </div>\n        </Card>\n    );\n};\n\nexport default ReportCharts;","import React from 'react';\nimport { formatCurrency } from '../../components/SASTaxSimulator/utils';\n\n/**\n * Barra laterale riepilogativa \n * Visibile solo su schermi PC\n */\nconst Sidebar = ({\n    fatturato,\n    costi,\n    costiSociOperativi,\n    costiEsenti,\n    costiNonEsenti,\n    utileAziendale,\n    irap,\n    utileDopoIrap,\n    soci,\n    risultatiSoci\n}) => {\n    const totaleImposte = risultatiSoci.reduce((acc, r) => acc + r.totaleImposte, 0);\n    const totaleNettoPercepito = risultatiSoci.reduce((acc, r) => acc + r.nettoPercepito, 0);\n\n    return (\n        <div className=\"hidden 2xl:block fixed right-4 top-4 w-64 bg-white shadow-lg rounded-lg p-4 border-l-4 border-blue-500 h-[calc(100vh-2rem)] overflow-y-auto\">\n            <h3 className=\"text-lg font-semibold text-blue-800 mb-4 border-b pb-2\">Riepilogo Simulazione</h3>\n\n            <div className=\"space-y-4\">\n                <div className=\"bg-blue-50 p-3 rounded\">\n                    <h4 className=\"font-medium text-sm text-gray-600\">Dati Aziendali</h4>\n                    <ul className=\"mt-2 space-y-1 text-sm\">\n                        <li className=\"flex justify-between\">\n                            <span>Fatturato:</span>\n                            <span className=\"font-medium\">{formatCurrency(fatturato)}</span>\n                        </li>\n                        <li className=\"flex justify-between\">\n                            <span>Costi base:</span>\n                            <span className=\"font-medium\">{formatCurrency(costi)}</span>\n                        </li>\n                        <li className=\"flex justify-between\">\n                            <span>Costi soci (totali):</span>\n                            <span className=\"font-medium\">{formatCurrency(costiSociOperativi)}</span>\n                        </li>\n                        <li className=\"flex justify-between text-green-600\">\n                            <span>- di cui deducibili:</span>\n                            <span className=\"font-medium\">{formatCurrency(costiEsenti)}</span>\n                        </li>\n                        <li className=\"flex justify-between text-yellow-600\">\n                            <span>- di cui non deducibili:</span>\n                            <span className=\"font-medium\">{formatCurrency(costiNonEsenti)}</span>\n                        </li>\n                        <li className=\"flex justify-between\">\n                            <span>Utile:</span>\n                            <span className=\"font-medium\">{formatCurrency(utileAziendale)}</span>\n                        </li>\n                        <li className=\"flex justify-between\">\n                            <span>IRAP:</span>\n                            <span className=\"font-medium\">{formatCurrency(irap)}</span>\n                        </li>\n                        <li className=\"flex justify-between font-semibold text-green-700\">\n                            <span>Utile netto:</span>\n                            <span>{formatCurrency(utileDopoIrap)}</span>\n                        </li>\n                    </ul>\n                </div>\n\n                <div className=\"bg-gray-50 p-3 rounded\">\n                    <h4 className=\"font-medium text-sm text-gray-600\">Soci ({soci.length})</h4>\n                    <ul className=\"mt-2 space-y-2 text-sm\">\n                        {risultatiSoci.map((risultato, index) => (\n                            <li key={index} className=\"border-b pb-1 last:border-b-0\">\n                                <div className=\"font-medium flex justify-between\">\n                                    <span>{risultato.socio.nome}</span>\n                                    <span className=\"text-xs bg-blue-100 text-blue-800 px-1 rounded\">\n                                        {risultato.socio.tipo === 'operativo' ? 'Operativo' : 'Capitale'}\n                                    </span>\n                                </div>\n                                <div className=\"text-xs flex justify-between mt-1\">\n                                    <span>Quota {risultato.socio.percentuale}%:</span>\n                                    <span>{formatCurrency(risultato.quotaUtile)}</span>\n                                </div>\n                                {risultato.socio.tipo === 'operativo' && (\n                                    <>\n                                        {risultato.importoBuoniPastoEsenti + risultato.importoTrasferteEsenti > 0 && (\n                                            <div className=\"text-xs flex justify-between\">\n                                                <span>Esenti:</span>\n                                                <span className=\"text-green-600\">\n                                                    {formatCurrency(risultato.importoBuoniPastoEsenti + risultato.importoTrasferteEsenti)}\n                                                </span>\n                                            </div>\n                                        )}\n                                        {risultato.importoBuoniPastoNonEsenti + risultato.importoTrasferteNonEsenti > 0 && (\n                                            <div className=\"text-xs flex justify-between\">\n                                                <span>Non esenti:</span>\n                                                <span className=\"text-yellow-600\">\n                                                    {formatCurrency(risultato.importoBuoniPastoNonEsenti + risultato.importoTrasferteNonEsenti)}\n                                                </span>\n                                            </div>\n                                        )}\n                                    </>\n                                )}\n                                <div className=\"text-xs flex justify-between\">\n                                    <span>Imposte:</span>\n                                    <span className=\"text-red-600\">{formatCurrency(risultato.totaleImposte)}</span>\n                                </div>\n                                <div className=\"text-xs flex justify-between\">\n                                    <span>Netto:</span>\n                                    <span className=\"text-green-600\">{formatCurrency(risultato.quotaUtile - risultato.totaleImposte)}</span>\n                                </div>\n                                <div className=\"text-xs flex justify-between font-medium\">\n                                    <span>Netto Percepito:</span>\n                                    <span className=\"text-green-800\">{formatCurrency(risultato.nettoPercepito)}</span>\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n\n                <div className=\"bg-green-50 p-3 rounded\">\n                    <h4 className=\"font-medium text-sm text-gray-600\">Totali</h4>\n                    <ul className=\"mt-2 space-y-1 text-sm\">\n                        <li className=\"flex justify-between text-red-600\">\n                            <span>Imposte totali:</span>\n                            <span className=\"font-medium\">{formatCurrency(totaleImposte + irap)}</span>\n                        </li>\n                        <li className=\"flex justify-between text-green-600 font-semibold\">\n                            <span>Netto totale:</span>\n                            <span>{formatCurrency(totaleNettoPercepito)}</span>\n                        </li>\n                        <li className=\"flex justify-between mt-2 pt-2 border-t text-xs\">\n                            <span>Pressione fiscale:</span>\n                            <span>{(((totaleImposte + irap) / (fatturato - costi)) * 100).toFixed(1)}%</span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n\n            <div className=\"mt-4 text-center text-xs text-gray-500\">\n                2025 Key-Code\n            </div>\n        </div>\n    );\n};\n\nexport default Sidebar;","/**\n * Utility per il salvataggio automatico dei dati dell'applicazione\n * Questo modulo implementa una soluzione robusta per salvare e recuperare\n * automaticamente i dati di configurazione del simulatore SAS\n */\nimport { setCookie, getCookie, deleteCookie } from './cookieUtils';\n// Chiave usata per salvare i dati nel localStorage\nconst STORAGE_KEY = 'sas-simulator-data';\n\n\nexport const saveAutoData = (data) => {\n    try {\n        // Prova a salvare i dati nel cookie\n        const success = setCookie(STORAGE_KEY, data, 30); // Salva per 30 giorni\n        if (success) {\n            console.log('Dati salvati con successo nel cookie');\n            return true;\n        } else {\n            console.error('Errore durante il salvataggio dei dati nel cookie');\n        }\n    } catch (error) {\n        console.error('Errore durante il salvataggio dei dati nel cookie:', error);\n    }\n\n};\n\nexport const loadAutoData = () => {\n    try {\n        // Prova a recuperare i dati dal cookie\n        const data = getCookie(STORAGE_KEY);\n        if (data) {\n            return data;\n        } else {\n            console.warn('Nessun dato trovato nel cookie');\n            return null;\n        }\n    }\n        catch (error) {\n            console.error('Errore durante il recupero dei dati dal cookie:', error);\n            return null;\n        }\n\n};\n\nexport const deleteAutoData = () => {\n    try {\n        // Prova a eliminare i dati dal cookie\n        deleteCookie(STORAGE_KEY);\n        console.log('Dati eliminati con successo dal cookie');\n        return true;\n    } catch (error) {\n        console.error('Errore durante l\\'eliminazione dei dati dal cookie:', error);\n        return false;\n    }\n};\n\n\n\n\n\n\n","/**\n * Utility per la gestione dei cookie\n */\n\n/**\n * Imposta un cookie con i dati specificati\n * @param {string} name - Nome del cookie\n * @param {object} value - Valore da salvare (verr� convertito in JSON)\n * @param {number} days - Giorni di validit� del cookie (default: 30)\n */\nexport const setCookie = (name, value, days = 30) => {\n    try {\n        // Converti l'oggetto in una stringa JSON\n        const jsonValue = JSON.stringify(value);\n\n        // Calcola la data di scadenza\n        const d = new Date();\n        d.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));\n\n        // Imposta il cookie\n        document.cookie = `${name}=${encodeURIComponent(jsonValue)};expires=${d.toUTCString()};path=/`;\n\n        return true;\n    } catch (error) {\n        console.error('Errore durante il salvataggio del cookie:', error);\n        return false;\n    }\n};\n\n/**\n * Ottiene il valore di un cookie\n * @param {string} name - Nome del cookie da leggere\n * @returns {object|null} - Valore del cookie o null se non trovato\n */\nexport const getCookie = (name) => {\n    try {\n        // Cerca il cookie nel documento\n        const cookieArr = document.cookie.split(\";\");\n\n        // Cerca il cookie con il nome specificato\n        for (let i = 0; i < cookieArr.length; i++) {\n            const cookiePair = cookieArr[i].split(\"=\");\n            const cookieName = cookiePair[0].trim();\n\n            if (cookieName === name) {\n                // Decodifica il valore e converte da JSON a oggetto JavaScript\n                const decodedValue = decodeURIComponent(cookiePair[1]);\n                return JSON.parse(decodedValue);\n            }\n        }\n\n        return null;\n    } catch (error) {\n        console.error('Errore durante la lettura del cookie:', error);\n        return null;\n    }\n};\n\n/**\n * Elimina un cookie\n * @param {string} name - Nome del cookie da eliminare\n */\nexport const deleteCookie = (name) => {\n    document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;\n};","import React, { useState } from 'react';\nimport { deleteAutoData, saveAutoData } from '../../utils/autoSaveUtils';\nimport { loadAutoData } from '../../utils/autoSaveUtils';\n\n/**\n * Componente per i controlli di gestione della sessione\n * @param {Object} props\n * @param {Object} props.simulationData - Dati completi della simulazione\n * @param {Function} props.onReset - Funzione chiamata quando si resetta la simulazione\n * @param {Function} props.onResetComplete - Callback eseguito al completamento del reset\n */\nconst SessionControls = ({ simulationData, onReset, onResetComplete, onDataRestored }) => {\n    const [showConfirmReset, setShowConfirmReset] = useState(false);\n    const [isExporting, setIsExporting] = useState(false);\n\n    const handleImport = (event) => {\n        const file = event.target.files[0];\n        console.log('File selezionato:', file);\n        \n        if (file) {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                try {\n                    const data = JSON.parse(e.target.result);\n                    // Qui puoi gestire i dati importati come preferisci\n                    console.log('Dati importati:', data);\n                    deleteAutoData();\n                    saveAutoData(data);\n                    onDataRestored(data);\n                    \n\n                } catch (error) {\n                    console.error('Errore durante l\\'importazione dei dati:', error);\n                    alert('Si � verificato un errore durante l\\'importazione dei dati.');\n                }\n            };\n            // Leggi il file come testo\n            reader.readAsText(file);\n            \n        }\n        ;\n    };\n    // Gestione dell'esportazione dati in formato JSON\n    const handleExport = () => {\n        setIsExporting(true);\n\n        try {\n            // Crea un blob JSON con i dati della simulazione\n            console.log('Dati da esportare:', loadAutoData());\n            const dataStr = JSON.stringify(loadAutoData(), null, 2);\n            const blob = new Blob([dataStr], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n\n            // Crea e simula il click su un link di download\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = `simulazione-sas-${new Date().toISOString().split('T')[0]}.json`;\n            link.click();\n\n            URL.revokeObjectURL(url);\n        } catch (error) {\n            console.error('Errore durante l\\'esportazione dei dati:', error);\n            alert('Si � verificato un errore durante l\\'esportazione dei dati.');\n        } finally {\n            setIsExporting(false);\n        }\n    };\n\n    // Gestione del reset dei dati\n    const handleReset = () => {\n        if (showConfirmReset) {\n\n            // Nascondi il dialogo di conferma\n            setShowConfirmReset(false);\n\n            // Notifica al genitore che il reset � completato\n            if (onResetComplete) {\n\n                deleteAutoData();\n                onResetComplete();\n                // reload default data\n                onReset();\n            }\n        } else {\n            // Mostra il dialogo di conferma\n            setShowConfirmReset(true);\n        }\n    };\n\n    return (\n        <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-md py-3 px-6 flex justify-between items-center\">\n            <div className=\"flex space-x-2\">\n                <button\n                    onClick={handleExport}\n                    disabled={isExporting}\n                    className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded shadow disabled:opacity-50\"\n                >\n                    {isExporting ? 'Esportazione...' : 'Esporta Dati'}\n                </button>\n                <button className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded shadow\"\n                    onClick={() => {\n                        document.getElementById('fileInput').click();\n\n                    }\n                    }\n\n                >\n                Importa Dati\n                </button>\n                <input\n                    type=\"file\"\n                    id=\"fileInput\"\n                    accept=\".json\"\n                    onChange={handleImport}\n                    className=\"hidden\"\n                />\n                <button\n                    onClick={handleReset}\n                    className={`${showConfirmReset\n                            ? 'bg-red-500 hover:bg-red-600'\n                            : 'bg-gray-500 hover:bg-gray-600'\n                        } text-white px-4 py-2 rounded shadow`}\n                >\n                    {showConfirmReset\n                        ? 'Conferma Reset'\n                        : 'Reset Dati'}\n                </button>\n            </div>\n\n            {showConfirmReset && (\n                <div className=\"text-sm text-red-500 ml-2\">\n                    Attenzione: questa operazione canceller&agrave; tutti i dati inseriti.\n                </div>\n            )}\n\n            <div className=\"text-xs text-gray-500\">\n                Versione {simulationData.versione}\n            </div>\n        </div>\n    );\n};\n\nexport default SessionControls;","import React from 'react';\nimport LoadingSpinner from './LoadingSpinner';\n\n/**\n * Componente per visualizzare un indicatore di caricamento\n * @param {Object} props - Props del componente\n * @param {number} props.progress - Percentuale di caricamento (0-100)\n * @param {string} props.message - Messaggio da mostrare durante il caricamento\n * @param {boolean} props.isIndeterminate - Se true, mostra una barra indeterminata\n * @param {string} props.type - Tipo di indicatore ('bar' o 'spinner')\n */\nconst LoadingIndicator = ({\n    progress = 0,\n    message = \"Caricamento in corso...\",\n    isIndeterminate = false,\n    type = 'bar'\n}) => {\n    return (\n        <div className=\"fixed inset-0 bg-white bg-opacity-80 flex flex-col items-center justify-center z-50\">\n            <div className=\"bg-white p-6 rounded-lg shadow-lg max-w-md w-full\">\n                <h2 className=\"text-xl font-semibold text-blue-800 mb-4 text-center\">\n                    {message}\n                </h2>\n\n                {type === 'bar' ? (\n                    <>\n                        <div className=\"w-full h-4 bg-gray-200 rounded-full overflow-hidden\">\n                            {isIndeterminate ? (\n                                <div className=\"h-full bg-blue-500 rounded-full animate-pulse\"\n                                    style={{ width: '100%' }}></div>\n                            ) : (\n                                <div className=\"h-full bg-blue-500 rounded-full transition-all duration-300\"\n                                    style={{ width: `${Math.max(5, Math.min(progress, 100))}%` }}></div>\n                            )}\n                        </div>\n\n                        {!isIndeterminate && (\n                            <div className=\"text-right mt-1 text-sm text-gray-600\">\n                                {Math.round(progress)}%\n                            </div>\n                        )}\n                    </>\n                ) : (\n                    <div className=\"flex justify-center py-4\">\n                        <LoadingSpinner size=\"large\" color=\"primary\" />\n                    </div>\n                )}\n\n                <div className=\"text-center mt-4 text-sm text-gray-500\">\n                    Simulatore Tassazione SAS | Key-Code\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default LoadingIndicator;","import React, { useState, useEffect, useCallback } from 'react';\nimport AziendaForm from './AziendaForm';\nimport SocioList from './SocioList';\nimport SocioResults from './SocioResults';\nimport ReportCharts from './ReportCharts';\nimport Sidebar from '../UI/Sidebar';\nimport SessionControls from '../UI/SessionControls';\nimport LoadingIndicator from '../UI/LoadingIndicator';\nimport {\n    calcolaCostiSociOperativi,\n    calcolaRisultatiSocio,\n    creaNuovoSocio\n} from './utils';\nimport { saveAutoData, loadAutoData, deleteAutoData } from '../../utils/autoSaveUtils';\n\n/**\n * Componente principale del simulatore di tassazione SAS\n */\nconst SASTaxSimulator = () => {\n    // Stato per i dati aziendali con valori predefiniti\n    const [fatturato, setFatturato] = useState(100000);\n    const [costi, setCosti] = useState(40000);\n    const [aliquotaIrap, setAliquotaIrap] = useState(3.9); // Default IRAP 3.9%\n    const [aliquotaInps, setAliquotaInps] = useState(25.0);\n\n    // Stato per i soci con valori predefiniti\n    const [soci, setSoci] = useState([\n        {\n            ...creaNuovoSocio(1, \"Mario Rossi\"),\n            tipo: \"operativo\",\n            percentuale: 60,\n            redditoEsterno: 0,\n            giornateLavorate: 220,\n            buoniPasto: true,\n            valoreBuoniPasto: 8,\n            buoniPastoEsentiFino: 8,\n            trasferte: true,\n            giorniTrasferta: 30,\n            importoTrasfertaGiorno: 50,\n            trasfertaEsenteFino: 46.48,\n        },\n        {\n            ...creaNuovoSocio(2, \"Giulia Bianchi\"),\n            tipo: \"capitale\",\n            percentuale: 40,\n            redditoEsterno: 30000,\n        }\n    ]);\n\n    // Configurazione degli scaglioni IRPEF\n    const [scaglioniIrpef, setScaglioniIrpef] = useState([\n        { limite: 15000, aliquota: 23 },\n        { limite: 28000, aliquota: 25 },\n        { limite: 50000, aliquota: 35 },\n        { limite: Infinity, aliquota: 43 }\n    ]);\n\n    // Aliquote addizionali\n    const [aliqRegionale, setAliqRegionale] = useState(1.73);\n    const [aliqComunale, setAliqComunale] = useState(0.8);\n\n    // Stato di inizializzazione\n    const [isInitialized, setIsInitialized] = useState(false);\n    // Stato per tenere traccia delle modifiche\n    const [hasChanges, setHasChanges] = useState(false);\n    // Stati per il caricamento\n    const [isLoading, setIsLoading] = useState(true);\n    const [loadingProgress, setLoadingProgress] = useState(0);\n    const [loadingMessage, setLoadingMessage] = useState('Inizializzazione del simulatore...');\n    // Stato per il reset\n    const [isResetting, setIsResetting] = useState(false);\n\n    // Funzione per impostare i valori predefiniti\n    const setDefaultValues = useCallback(() => {\n        setFatturato(100000);\n        setCosti(40000);\n        setAliquotaIrap(3.9);\n        setAliquotaInps(25.0);\n        setSoci([\n            {\n                ...creaNuovoSocio(1, \"Mario Rossi\"),\n                tipo: \"operativo\",\n                percentuale: 60,\n                redditoEsterno: 0,\n                giornateLavorate: 220,\n                buoniPasto: true,\n                valoreBuoniPasto: 8,\n                buoniPastoEsentiFino: 8,\n                trasferte: true,\n                giorniTrasferta: 30,\n                importoTrasfertaGiorno: 50,\n                trasfertaEsenteFino: 46.48,\n            },\n            {\n                ...creaNuovoSocio(2, \"Giulia Bianchi\"),\n                tipo: \"capitale\",\n                percentuale: 40,\n                redditoEsterno: 30000,\n            }\n        ]);\n        setScaglioniIrpef([\n            { limite: 15000, aliquota: 23 },\n            { limite: 28000, aliquota: 25 },\n            { limite: 50000, aliquota: 35 },\n            { limite: Infinity, aliquota: 43 }\n        ]);\n        setAliqRegionale(1.73);\n        setAliqComunale(0.8);\n    }, []);\n\n    // Funzione per raccogliere tutti i dati correnti\n    const collectCurrentData = useCallback(() => {\n        return {\n            fatturato,\n            costi,\n            aliquotaIrap,\n            aliquotaInps,\n            soci,\n            scaglioniIrpef,\n            aliqRegionale,\n            aliqComunale\n        };\n    }, [fatturato, costi, aliquotaIrap, aliquotaInps, soci, scaglioniIrpef, aliqRegionale, aliqComunale]);\n\n    // Funzione per gestire il reset\n    const handleReset = useCallback(() => {\n        // Imposta immediatamente lo stato di reset e loading\n        setIsResetting(true);\n        setIsLoading(true);\n        setLoadingMessage('Reset in corso...');\n        setLoadingProgress(0);\n\n        // Avvia la simulazione del progresso\n        const progressInterval = setInterval(() => {\n            setLoadingProgress(prev => {\n                if (prev >= 90) {\n                    clearInterval(progressInterval);\n                    return prev;\n                }\n                return prev + 5;\n            });\n        }, 50);\n\n        // Esegue il reset effettivo con un piccolo ritardo per mostrare l'UI\n        setTimeout(() => {\n            try {\n                // Pulisci i dati salvati\n                const resetSuccess = deleteAutoData();\n\n                if (resetSuccess) {\n                    setLoadingMessage('Ripristino valori predefiniti...');\n                    setLoadingProgress(95);\n\n                    // Ripristina i valori predefiniti\n                    setDefaultValues();\n\n                    console.log('Reset completato con successo');\n                } else {\n                    setLoadingMessage('Errore durante il reset. Ripristino valori predefiniti...');\n                    setLoadingProgress(75);\n                    console.error('Errore durante il reset dei dati');\n\n                    // Comunque ripristina i valori predefiniti\n                    setDefaultValues();\n                }\n\n                // Completa il processo di reset\n                setLoadingProgress(100);\n                setTimeout(() => {\n                    setIsLoading(false);\n                    setIsResetting(false);\n                    setHasChanges(false); // Resetta anche lo stato delle modifiche\n                    setIsInitialized(true); // Assicurati che il componente sia ancora inizializzato\n                }, 500);\n\n            } catch (error) {\n                console.error('Errore critico durante il reset:', error);\n                setLoadingMessage('Si � verificato un errore. Ripristino forzato...');\n\n                // In caso di errore, comunque ripristina i valori predefiniti\n                setDefaultValues();\n\n                setTimeout(() => {\n                    setIsLoading(false);\n                    setIsResetting(false);\n                    setIsInitialized(true);\n                }, 1000);\n            } finally {\n                clearInterval(progressInterval);\n            }\n        }, 500);\n\n        // Restituisci true per indicare che il reset � stato avviato\n        return true;\n    }, [setDefaultValues]);\n\n    // Caricamento dati all'avvio\n    useEffect(() => {\n        const loadSavedData = loadFromCookie(setIsLoading, setLoadingMessage, setLoadingProgress, setFatturato, setCosti, setAliquotaIrap, setAliquotaInps, setSoci, setScaglioniIrpef, setAliqRegionale, setAliqComunale, setIsInitialized);\n\n        loadSavedData();\n    }, []);\n\n    // Salvataggio automatico quando cambiano i dati (ma solo dopo l'inizializzazione)\n    useEffect(() => {\n        // Non salviamo durante l'inizializzazione o il reset per evitare di sovrascrivere i dati\n        if (!isInitialized || isResetting) return;\n\n        // Segnala che ci sono modifiche da salvare\n        setHasChanges(true);\n    }, [fatturato, costi, aliquotaIrap, aliquotaInps, soci, scaglioniIrpef, aliqRegionale, aliqComunale, isInitialized, isResetting]);\n\n    // Effettua il salvataggio dopo un breve ritardo dall'ultima modifica\n    useEffect(() => {\n        if (!hasChanges || !isInitialized || isResetting) return;\n\n        const saveTimeout = setTimeout(() => {\n            const currentData = collectCurrentData();\n            const saveResult = saveAutoData(currentData);\n\n            if (saveResult) {\n                console.log('Salvataggio automatico completato:', new Date().toLocaleTimeString());\n                setHasChanges(false);\n            } else {\n                console.warn('Salvataggio automatico non riuscito');\n            }\n        }, 1000); // Attende 1 secondo dall'ultima modifica prima di salvare\n\n        // Pulizia del timeout se i dati cambiano nuovamente prima del salvataggio\n        return () => clearTimeout(saveTimeout);\n    }, [hasChanges, isInitialized, isResetting, collectCurrentData]);\n\n    // Calcola i costi per soci operativi con dettaglio esente/non esente\n    const costiInfo = calcolaCostiSociOperativi(soci);\n    const costiSociOperativi = costiInfo.totale;\n\n    // Estrae il dettaglio dei costi non esenti che impattano sull'utile aziendale\n    const costiNonEsenti = costiInfo.dettaglio.buoniPastoNonEsenti + costiInfo.dettaglio.trasferteNonEsenti;\n\n    // Calcola l'utile aziendale considerando i costi per soci operativi, ma solo la parte esente\n    // La parte non esente impatta sull'imponibile del socio ma non sull'utile aziendale\n    const utileAziendale = fatturato - costi - costiSociOperativi + costiNonEsenti;\n\n    // Calcola IRAP\n    const irap = utileAziendale * (aliquotaIrap / 100);\n\n    // Utile dopo IRAP\n    const utileDopoIrap = utileAziendale - irap;\n\n    // Percentuale totale di partecipazione\n    const totalPercentuale = soci.reduce((acc, socio) => acc + Number(socio.percentuale), 0);\n\n    // Calcola risultati per ciascun socio\n    const risultatiSoci = soci.map(socio =>\n        calcolaRisultatiSocio(\n            socio,\n            utileDopoIrap,\n            aliquotaInps,\n            scaglioniIrpef,\n            aliqRegionale,\n            aliqComunale\n        )\n    );\n\n    // Dati completi della simulazione (per export)\n    const simulationData = {\n        datiAzienda: {\n            fatturato,\n            costi,\n            aliquotaIrap,\n            aliquotaInps,\n            costiSociOperativi,\n            costiEsenti: costiSociOperativi - costiNonEsenti,\n            costiNonEsenti,\n            utileAziendale,\n            irap,\n            utileDopoIrap\n        },\n        tassazione: {\n            scaglioniIrpef,\n            aliqRegionale,\n            aliqComunale\n        },\n        soci,\n        risultati: risultatiSoci,\n        dataSimulazione: new Date().toISOString(),\n        versione: \"1.0.0\"\n    };\n\n    return (\n        <div className=\"p-6 max-w-6xl mx-auto bg-gray-50 relative pb-16\">\n            {(isLoading || isResetting) && (\n                <LoadingIndicator\n                    progress={loadingProgress}\n                    message={loadingMessage}\n                />\n            )}\n\n            <h1 className=\"text-2xl font-bold mb-6 text-blue-800\">Simulatore Tassazione SAS</h1>\n\n            {/* Indicatore di salvataggio automatico */}\n            {hasChanges && isInitialized && !isResetting && (\n                <div className=\"fixed top-4 right-4 bg-yellow-100 text-yellow-800 px-3 py-1 rounded text-sm shadow-md z-50\">\n                    Salvataggio in corso...\n                </div>\n            )}\n\n            <AziendaForm\n                fatturato={fatturato}\n                setFatturato={setFatturato}\n                costi={costi}\n                setCosti={setCosti}\n                aliquotaIrap={aliquotaIrap}\n                setAliquotaIrap={setAliquotaIrap}\n                aliquotaInps={aliquotaInps}\n                setAliquotaInps={setAliquotaInps}\n                utileAziendale={utileAziendale}\n                irap={irap}\n                utileDopoIrap={utileDopoIrap}\n                costiSociOperativi={costiSociOperativi}\n                costiEsenti={costiSociOperativi - costiNonEsenti}\n                costiNonEsenti={costiNonEsenti}\n            />\n\n            <SocioList\n                soci={soci}\n                setSoci={setSoci}\n                totalPercentuale={totalPercentuale}\n            />\n\n            <div className=\"mb-6\">\n                <h2 className=\"text-xl font-semibold mb-4\">Risultati</h2>\n\n                {risultatiSoci.map((risultato, index) => (\n                    <SocioResults key={index} risultato={risultato} />\n                ))}\n            </div>\n\n            <ReportCharts\n                fatturato={fatturato}\n                costi={costi}\n                costiSociOperativi={costiSociOperativi}\n                costiEsenti={costiSociOperativi - costiNonEsenti}\n                costiNonEsenti={costiNonEsenti}\n                utileAziendale={utileAziendale}\n                irap={irap}\n                utileDopoIrap={utileDopoIrap}\n                risultatiSoci={risultatiSoci}\n            />\n\n            <div className=\"text-sm text-gray-500 mt-8\">\n                <p>Disclaimer: Questo simulatore fornisce una stima indicativa. Per calcoli precisi si consiglia di consultare un commercialista.</p>\n                <p>Le aliquote IRPEF e i contributi INPS utilizzati sono configurabili ma potrebbero richiedere aggiornamenti in base alle normative vigenti.</p>\n                <p className=\"mt-4 text-center font-semibold\">2025 Key-Code. Tutti i diritti riservati.</p>\n            </div>\n\n            {/* Sidebar laterale su schermi grandi */}\n            <Sidebar\n                fatturato={fatturato}\n                costi={costi}\n                costiSociOperativi={costiSociOperativi}\n                costiEsenti={costiSociOperativi - costiNonEsenti}\n                costiNonEsenti={costiNonEsenti}\n                utileAziendale={utileAziendale}\n                irap={irap}\n                utileDopoIrap={utileDopoIrap}\n                soci={soci}\n                risultatiSoci={risultatiSoci}\n            />\n\n            {/* Controlli per la sessione */}\n            <SessionControls\n                simulationData={simulationData}\n                onReset={handleReset}\n                onDataRestored={(data) => {\n                    //reload stored data\n                    loadFromCookie(setIsLoading, setLoadingMessage, setLoadingProgress, setFatturato, setCosti, setAliquotaIrap, setAliquotaInps, setSoci, setScaglioniIrpef, setAliqRegionale, setAliqComunale, setIsInitialized)();\n                   // loadFromCookie(true, \"Importazione dati...\", true, data.fatturato, data.costi, data.aliquotaIrap, data.aliquotaInps,data.soci,data.scaglioniIrpef,data.aliqRegionale,data.aliqComunale,true)();\n                }\n                }\n                onResetComplete={() => {\n                    // Eventuali operazioni aggiuntive da eseguire al completamento del reset\n                    console.log('Reset completato e UI aggiornata');\n                }}\n                \n            />\n        </div>\n    );\n};\n\nexport default SASTaxSimulator;\n\nfunction loadFromCookie(setIsLoading,\n                            setLoadingMessage,\n                            setLoadingProgress,\n                            setFatturato,\n                            setCosti,\n                            setAliquotaIrap,\n                            setAliquotaInps,\n                            setSoci,\n                            setScaglioniIrpef,\n                            setAliqRegionale,\n                            setAliqComunale,\n                            setIsInitialized) {\n    return () => {\n        try {\n            setIsLoading(true);\n            setLoadingMessage('Caricamento dati salvati...');\n            setLoadingProgress(10);\n\n            // Simula progressi graduali del caricamento\n            const progressInterval = setInterval(() => {\n                setLoadingProgress(prev => {\n                    if (prev >= 90) {\n                        clearInterval(progressInterval);\n                        return prev;\n                    }\n                    return prev + 5;\n                });\n            }, 100);\n\n            setTimeout(() => {\n                const savedData = loadAutoData();\n                setLoadingProgress(95);\n\n                if (savedData) {\n                    setLoadingMessage('Elaborazione dati...');\n\n                    // Carica i dati salvati se disponibili\n                    if (savedData.fatturato !== undefined) setFatturato(Number(savedData.fatturato));\n                    if (savedData.costi !== undefined) setCosti(Number(savedData.costi));\n                    if (savedData.aliquotaIrap !== undefined) setAliquotaIrap(Number(savedData.aliquotaIrap));\n                    if (savedData.aliquotaInps !== undefined) setAliquotaInps(Number(savedData.aliquotaInps));\n\n                    if (savedData.soci && Array.isArray(savedData.soci)) {\n                        // Assicuriamoci che tutti i soci abbiano un ID valido\n                        const validSoci = savedData.soci.map((socio, index) => ({\n                            ...socio,\n                            id: socio.id || index + 1\n                        }));\n                        setSoci(validSoci);\n                    }\n\n                    if (savedData.scaglioniIrpef && Array.isArray(savedData.scaglioniIrpef)) {\n                        setScaglioniIrpef(savedData.scaglioniIrpef);\n                    }\n\n                    if (savedData.aliqRegionale !== undefined) setAliqRegionale(Number(savedData.aliqRegionale));\n                    if (savedData.aliqComunale !== undefined) setAliqComunale(Number(savedData.aliqComunale));\n\n                    console.log('Dati caricati con successo.');\n                } else {\n                    setLoadingMessage('Configurazione predefinita...');\n                    console.log('Nessun dato salvato trovato, utilizzo valori predefiniti.');\n                }\n\n                setLoadingProgress(100);\n\n                // Imposta lo stato di inizializzazione\n                setTimeout(() => {\n                    setIsInitialized(true);\n                    setIsLoading(false);\n                    clearInterval(progressInterval);\n                }, 500);\n            }, 800);\n        } catch (error) {\n            console.error('Errore durante il caricamento dei dati:', error);\n            setLoadingMessage('Si � verificato un errore. Utilizzo valori predefiniti...');\n            // In caso di errore, manteniamo i valori predefiniti\n            // Anche in caso di errore, terminiamo il caricamento dopo un certo tempo\n            setTimeout(() => {\n                setIsInitialized(true);\n                setIsLoading(false);\n            }, 1500);\n        }\n    };\n}\n"],"names":["_ref","title","children","className","_jsxs","_jsx","label","value","bgColor","formatCurrency","Intl","NumberFormat","style","currency","format","creaNuovoSocio","id","nome","arguments","length","undefined","tipo","percentuale","redditoEsterno","giornateLavorate","buoniPasto","valoreBuoniPasto","trasferte","giorniTrasferta","importoTrasfertaGiorno","trasfertaEsenteFino","calcolaIrpef","reddito","CalcolaBuoniPasto","socio","costiBuoniPastoEsenti","costiBuoniPastoNonEsenti","totaleCosti","totaleBuoniPasto","fatturato","setFatturato","costi","setCosti","aliquotaIrap","setAliquotaIrap","aliquotaInps","setAliquotaInps","utileAziendale","irap","utileDopoIrap","costiSociOperativi","costiEsenti","costiNonEsenti","Card","type","onChange","e","Number","target","min","max","step","InfoBox","updateSocio","rimuoviSocio","onClick","checked","Tooltip","animate","mount","scale","y","unmount","placement","InfoIcon","fontSize","soci","setSoci","totalPercentuale","filter","campo","valore","map","aggiungiSocio","nuovoSocio","Math","s","SocioForm","risultato","quotaUtile","importoBuoniPasto","importoBuoniPastoEsenti","importoBuoniPastoNonEsenti","importoTrasferte","importoTrasferteEsenti","importoTrasferteNonEsenti","contributiInps","redditoImponibileTotale","irpef","addizionaleRegionale","addizionaleComunale","totaleImposte","nettoPercepito","_Fragment","risultatiSoci","width","height","ResponsiveContainer","PieChart","Pie","data","name","cx","cy","labelLine","outerRadius","fill","dataKey","nameKey","_ref2","percent","toFixed","Cell","formatter","Legend","_ref3","entry","index","scope","reduce","acc","r","totaleNettoPercepito","STORAGE_KEY","saveAutoData","days","jsonValue","JSON","stringify","d","Date","setTime","getTime","document","cookie","encodeURIComponent","toUTCString","error","console","setCookie","log","loadAutoData","cookieArr","split","i","cookiePair","trim","decodedValue","decodeURIComponent","parse","getCookie","warn","deleteAutoData","simulationData","onReset","onResetComplete","onDataRestored","showConfirmReset","setShowConfirmReset","useState","isExporting","setIsExporting","handleExport","dataStr","blob","Blob","url","URL","createObjectURL","link","createElement","href","download","toISOString","click","revokeObjectURL","alert","disabled","getElementById","accept","event","file","files","reader","FileReader","onload","result","readAsText","handleReset","versione","progress","message","isIndeterminate","round","LoadingSpinner","size","color","SASTaxSimulator","buoniPastoEsentiFino","scaglioniIrpef","setScaglioniIrpef","limite","aliquota","Infinity","aliqRegionale","setAliqRegionale","aliqComunale","setAliqComunale","isInitialized","setIsInitialized","hasChanges","setHasChanges","isLoading","setIsLoading","loadingProgress","setLoadingProgress","loadingMessage","setLoadingMessage","isResetting","setIsResetting","setDefaultValues","useCallback","collectCurrentData","progressInterval","setInterval","prev","clearInterval","setTimeout","useEffect","loadFromCookie","loadSavedData","saveTimeout","currentData","toLocaleTimeString","clearTimeout","costiInfo","costiTrasferteEsenti","costiTrasferteNonEsenti","forEach","totaleTrasferte","valoreTrasferteGiornaliero","sogliaTrasferte","totale","dettaglio","buoniPastoEsenti","buoniPastoNonEsenti","trasferteEsenti","trasferteNonEsenti","calcolaCostiSociOperativi","calcolaRisultatiSocio","calcolaContributiInps","calcolaRedditoImponibileTotale","redditoImponibile","calcolaAddizionaleComunale","datiAzienda","tassazione","risultati","dataSimulazione","LoadingIndicator","AziendaForm","SocioList","SocioResults","ReportCharts","Sidebar","SessionControls","savedData","Array","isArray","validSoci"],"sourceRoot":""}
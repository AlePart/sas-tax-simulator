{"version":3,"file":"static/js/807.d1ae9d0a.chunk.js","mappings":"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","sources":["components/UI/Card.js","components/UI/InfoBox.js","components/SASTaxSimulator/utils.js","components/SASTaxSimulator/AziendaForm.js","components/SASTaxSimulator/SocioForm.js","components/SASTaxSimulator/SocioList.js","components/SASTaxSimulator/SocioResults.js","components/SASTaxSimulator/ReportCharts.js","components/UI/Sidebar.js","utils/autoSaveUtils.js","utils/cookieUtils.js","components/UI/SessionControls.js","components/UI/LoadingIndicator.js","components/SASTaxSimulator/index.js"],"sourcesContent":["import React from 'react';\n\n/**\n * Componente Card per il layout delle sezioni\n * @param {Object} props - Props del componente\n * @param {React.ReactNode|string} props.title - Titolo della card\n * @param {React.ReactNode} props.children - Contenuto della card\n * @param {string} props.className - Classi CSS aggiuntive\n */\nconst Card = ({ title, children, className = '' }) => {\n    return (\n        <div className={`mb-6 p-4 bg-white rounded-lg shadow ${className}`}>\n            <h2 className=\"text-xl font-semibold mb-4\">{title}</h2>\n            {children}\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\n\n/**\n * Componente per visualizzare un valore con label\n * @param {Object} props - Props del componente\n * @param {string} props.label - Label da visualizzare\n * @param {string|number} props.value - Valore da visualizzare\n * @param {string} props.bgColor - Colore di sfondo (default: bg-blue-50)\n * @param {string} props.className - Classi CSS aggiuntive\n */\nconst InfoBox = ({ label, value, bgColor = 'bg-blue-50', className = '' }) => {\n    return (\n        <div className={`p-3 ${bgColor} rounded ${className}`}>\n            <span className=\"text-sm text-gray-600\">{label}</span>\n            <p className=\"text-lg font-semibold\">{value}</p>\n        </div>\n    );\n};\n\nexport default InfoBox;","/**\n * Utility per il simulatore di tassazione SAS\n */\n\n/**\n * Formatta un valore numerico come valuta euro\n * @param {number} value - Valore da formattare\n * @returns {string} Valore formattato come valuta\n */\nexport const formatCurrency = (value) => {\n    return new Intl.NumberFormat('it-IT', {\n        style: 'currency',\n        currency: 'EUR'\n    }).format(value);\n};\n\n/**\n * Crea un nuovo oggetto socio con valori predefiniti\n * @param {number} id - ID univoco del socio\n * @param {string} nome - Nome del socio\n * @returns {Object} Nuovo oggetto socio con propriet� predefinite\n */\nexport const creaNuovoSocio = (id, nome = \"Nuovo Socio\") => {\n    return {\n        id,\n        nome,\n        tipo: \"operativo\", // Default: socio operativo\n        percentuale: 50,\n        redditoEsterno: 0,\n        giornateLavorate: 220,\n        buoniPasto: false,\n        valoreBuoniPasto: 8,\n        buoniPastoEsentiFino: 8, // Soglia di esenzione buoni pasto, default 8�\n        trasferte: false,\n        giorniTrasferta: 0,\n        importoTrasfertaGiorno: 50,\n        trasfertaEsenteFino: 46.48 // Soglia di esenzione trasferte, default 46.48�\n    };\n};\n\n/**\n * Calcola i costi legati ai soci operativi (buoni pasto e trasferte)\n * @param {Array} soci - Array di soci\n * @returns {Object} Costi totali e dettaglio costi esenti e non esenti\n */\nexport const calcolaCostiSociOperativi = (soci) => {\n    let totaleCosti = 0;\n    let costiBuoniPastoEsenti = 0;\n    let costiBuoniPastoNonEsenti = 0;\n    let costiTrasferteEsenti = 0;\n    let costiTrasferteNonEsenti = 0;\n\n    // Calcola i costi per i buoni pasto e trasferte\n    soci.forEach(socio => {\n        if (socio.tipo === \"operativo\") {\n            // Calcolo buoni pasto\n            if (socio.buoniPasto) {\n                const totaleBuoniPasto = socio.valoreBuoniPasto * socio.giornateLavorate;\n                // Gestione della soglia di esenzione per i buoni pasto\n                const valoreBuonoGiornaliero = socio.valoreBuoniPasto;\n                const sogliaBuono = socio.buoniPastoEsentiFino || 8; // Default 8� se non specificato\n\n                if (valoreBuonoGiornaliero <= sogliaBuono) {\n                    // Se il valore � sotto la soglia, tutto � esente\n                    costiBuoniPastoEsenti += totaleBuoniPasto;\n                } else {\n                    // Se supera la soglia, dividiamo tra esente e non esente\n                    costiBuoniPastoEsenti += sogliaBuono * socio.giornateLavorate;\n                    costiBuoniPastoNonEsenti += (valoreBuonoGiornaliero - sogliaBuono) * socio.giornateLavorate;\n                }\n\n                totaleCosti += totaleBuoniPasto;\n            }\n\n            // Calcolo trasferte\n            if (socio.trasferte) {\n                const totaleTrasferte = socio.importoTrasfertaGiorno * socio.giorniTrasferta;\n                // Gestione della soglia di esenzione per le trasferte\n                const valoreTrasferteGiornaliero = socio.importoTrasfertaGiorno;\n                const sogliaTrasferte = socio.trasfertaEsenteFino || 46.48; // Default 46.48� se non specificato\n\n                if (valoreTrasferteGiornaliero <= sogliaTrasferte) {\n                    // Se il valore � sotto la soglia, tutto � esente\n                    costiTrasferteEsenti += totaleTrasferte;\n                } else {\n                    // Se supera la soglia, dividiamo tra esente e non esente\n                    costiTrasferteEsenti += sogliaTrasferte * socio.giorniTrasferta;\n                    costiTrasferteNonEsenti += (valoreTrasferteGiornaliero - sogliaTrasferte) * socio.giorniTrasferta;\n                }\n\n                totaleCosti += totaleTrasferte;\n            }\n        }\n    });\n\n    return {\n        totale: totaleCosti,\n        dettaglio: {\n            buoniPastoEsenti: costiBuoniPastoEsenti,\n            buoniPastoNonEsenti: costiBuoniPastoNonEsenti,\n            trasferteEsenti: costiTrasferteEsenti,\n            trasferteNonEsenti: costiTrasferteNonEsenti\n        }\n    };\n};\n\n/**\n * Calcola il reddito imponibile totale di un socio\n * @param {Object} socio - Oggetto socio\n * @param {number} quotaUtile - Quota di utile aziendale spettante\n * @param {number} importoBuoniPastoNonEsenti - Importo buoni pasto non esenti\n * @param {number} importoTrasferteNonEsenti - Importo rimborsi trasferta non esenti\n * @returns {number} Reddito imponibile totale\n */\nconst calcolaRedditoImponibileTotale = (socio, quotaUtile, importoBuoniPastoNonEsenti, importoTrasferteNonEsenti) => {\n    // Reddito da SAS + Reddito esterno + Importi non esenti\n    return quotaUtile + socio.redditoEsterno + importoBuoniPastoNonEsenti + importoTrasferteNonEsenti;\n};\n\n/**\n * Calcola i contributi INPS di un socio\n * @param {number} quotaUtile - Quota di utile aziendale spettante\n * @param {number} aliquotaInps - Aliquota INPS in percentuale\n * @returns {number} Contributi INPS\n */\nconst calcolaContributiInps = (quotaUtile, aliquotaInps) => {\n    return quotaUtile * (aliquotaInps / 100);\n};\n\n/**\n * Calcola l'IRPEF sulla base degli scaglioni e del reddito imponibile\n * @param {number} reddito - Reddito imponibile totale\n * @returns {number} IRPEF da versare\n */\nconst calcolaIrpef = (reddito) => {\n    if (reddito <= 15000) {\n        return reddito * 0.23;\n    } else if (reddito <= 28000) {\n        return 15000 * 0.23 + (reddito - 15000) * 0.25;\n    } else if (reddito <= 50000) {\n        return 15000 * 0.23 + 13000 * 0.25 + (reddito - 28000) * 0.35;\n    } else {\n        return 15000 * 0.23 + 13000 * 0.25 + 22000 * 0.35 + (reddito - 50000) * 0.43;\n    }\n};\n\n/**\n * Calcola l'addizionale regionale sulla base dell'aliquota\n * @param {number} redditoImponibile - Reddito imponibile totale\n * @param {number} aliquota - Aliquota addizionale regionale\n * @returns {number} Addizionale regionale da versare\n */\nconst calcolaAddizionaleRegionale = (redditoImponibile, aliquota) => {\n    return redditoImponibile * (aliquota / 100);\n};\n\n/**\n * Calcola l'addizionale comunale sulla base dell'aliquota\n * @param {number} redditoImponibile - Reddito imponibile totale\n * @param {number} aliquota - Aliquota addizionale comunale\n * @returns {number} Addizionale comunale da versare\n */\nconst calcolaAddizionaleComunale = (redditoImponibile, aliquota) => {\n    return redditoImponibile * (aliquota / 100);\n};\n\n/**\n * Calcola i risultati fiscali di un socio\n * @param {Object} socio - Oggetto socio\n * @param {number} utileAziendale - Utile aziendale dopo IRAP\n * @param {number} aliquotaInps - Aliquota INPS in percentuale\n * @param {Array} scaglioniIrpef - Array di scaglioni IRPEF\n * @param {number} aliqRegionale - Aliquota addizionale regionale\n * @param {number} aliqComunale - Aliquota addizionale comunale\n * @returns {Object} Risultati fiscali per il socio\n */\nexport const calcolaRisultatiSocio = (\n    socio,\n    utileAziendale,\n    aliquotaInps,\n    scaglioniIrpef,\n    aliqRegionale,\n    aliqComunale\n) => {\n    // Calcola la quota di utile\n    const quotaUtile = utileAziendale * (socio.percentuale / 100);\n\n    // Calcola gli importi totali dei buoni pasto e trasferte\n    let importoBuoniPasto = 0;\n    let importoBuoniPastoEsenti = 0;\n    let importoBuoniPastoNonEsenti = 0;\n    let importoTrasferte = 0;\n    let importoTrasferteEsenti = 0;\n    let importoTrasferteNonEsenti = 0;\n\n    let contributiInps = 0;\n    if (socio.tipo === \"operativo\") {\n        // Buoni pasto\n        if (socio.buoniPasto) {\n            const totaleBuoni = socio.valoreBuoniPasto * socio.giornateLavorate;\n            importoBuoniPasto = totaleBuoni;\n\n            // Calcola la parte esente e non esente\n            const sogliaBuoni = socio.buoniPastoEsentiFino || 8; // Default 8�\n            if (socio.valoreBuoniPasto <= sogliaBuoni) {\n                importoBuoniPastoEsenti = totaleBuoni;\n                importoBuoniPastoNonEsenti = 0;\n            } else {\n                importoBuoniPastoEsenti = sogliaBuoni * socio.giornateLavorate;\n                importoBuoniPastoNonEsenti = (socio.valoreBuoniPasto - sogliaBuoni) * socio.giornateLavorate;\n            }\n        }\n\n        // Trasferte\n        if (socio.trasferte) {\n            const totaleTrasferte = socio.importoTrasfertaGiorno * socio.giorniTrasferta;\n            importoTrasferte = totaleTrasferte;\n\n            // Calcola la parte esente e non esente\n            const sogliaTrasferte = socio.trasfertaEsenteFino || 46.48; // Default 46.48�\n            if (socio.importoTrasfertaGiorno <= sogliaTrasferte) {\n                importoTrasferteEsenti = totaleTrasferte;\n                importoTrasferteNonEsenti = 0;\n            } else {\n                importoTrasferteEsenti = sogliaTrasferte * socio.giorniTrasferta;\n                importoTrasferteNonEsenti = (socio.importoTrasfertaGiorno - sogliaTrasferte) * socio.giorniTrasferta;\n            }\n        }\n\n        contributiInps = calcolaContributiInps(quotaUtile, aliquotaInps);\n    }\n\n    \n    \n\n    // Calcola il reddito imponibile totale\n    const redditoImponibileTotale = calcolaRedditoImponibileTotale(\n        socio,\n        quotaUtile,\n        importoBuoniPastoNonEsenti,\n        importoTrasferteNonEsenti\n    );\n\n    // Calcola IRPEF \n\n    const irpef = calcolaIrpef(redditoImponibileTotale) - calcolaIrpef(socio.redditoEsterno);\n\n    // Calcola addizionali\n    const addizionaleRegionale = calcolaAddizionaleRegionale(quotaUtile, aliqRegionale);\n    const addizionaleComunale = calcolaAddizionaleComunale(quotaUtile, aliqComunale);\n\n    // Calcola totale imposte\n    const totaleImposte = contributiInps + irpef + addizionaleRegionale + addizionaleComunale;\n\n    // Calcola il netto percepito\n    // Quota utile - imposte + parte esente di buoni pasto e trasferte\n    const nettoPercepito = quotaUtile - totaleImposte + importoBuoniPastoEsenti + importoTrasferteEsenti;\n\n    return {\n        socio,\n        quotaUtile,\n        importoBuoniPasto,\n        importoBuoniPastoEsenti,\n        importoBuoniPastoNonEsenti,\n        importoTrasferte,\n        importoTrasferteEsenti,\n        importoTrasferteNonEsenti,\n        contributiInps,\n        redditoImponibileTotale,\n        irpef,\n        addizionaleRegionale,\n        addizionaleComunale,\n        totaleImposte,\n        nettoPercepito\n    };\n};\n\n/**\n * Calcola la somma totale di una propriet� per tutti i soci\n * @param {Array} risultatiSoci - Array di risultati dei soci\n * @param {string} proprieta - Propriet� da sommare\n * @returns {number} Somma totale della propriet�\n */\nexport const calcolaTotaleSoci = (risultatiSoci, proprieta) => {\n    return risultatiSoci.reduce((acc, risultato) => acc + risultato[proprieta], 0);\n};","import React from 'react';\nimport Card from '../UI/Card';\nimport InfoBox from '../UI/InfoBox';\nimport { formatCurrency } from './utils';\n/**\n * Form per i dati aziendali\n */\nconst AziendaForm = ({\n    fatturato,\n    setFatturato,\n    costi,\n    setCosti,\n    aliquotaIrap,\n    setAliquotaIrap,\n    aliquotaInps,\n    setAliquotaInps,\n    utileAziendale,\n    irap,\n    utileDopoIrap,\n    costiSociOperativi,\n    costiEsenti,\n    costiNonEsenti\n}) => {\n    return (\n        <Card title=\"Dati Aziendali\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Fatturato Aziendale (&euro;)\n                    </label>\n                    <input\n                        type=\"number\"\n                        value={fatturato}\n                        onChange={(e) => setFatturato(Number(e.target.value))}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Costi Aziendali Base (&euro;)\n                    </label>\n                    <input\n                        type=\"number\"\n                        value={costi}\n                        onChange={(e) => setCosti(Number(e.target.value))}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Aliquota IRAP (%)\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"0.1\"\n                        value={aliquotaIrap}\n                        onChange={(e) => setAliquotaIrap(Number(e.target.value))}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Aliquota INPS (%)\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"0.1\"\n                        value={aliquotaInps}\n                        onChange={(e) => setAliquotaInps(Number(e.target.value))}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <InfoBox\n                    label=\"Costi Soci Operativi Totali:\"\n                    value={formatCurrency(costiSociOperativi)}\n                />\n                <InfoBox\n                    label=\"di cui Esenti:\"\n                    value={formatCurrency(costiEsenti)}\n                    bgColor=\"bg-green-50\"\n                />\n                <InfoBox\n                    label=\"di cui Non Esenti:\"\n                    value={formatCurrency(costiNonEsenti)}\n                    bgColor=\"bg-yellow-50\"\n                />\n            </div>\n\n            <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <InfoBox\n                    label=\"Utile Aziendale:\"\n                    value={formatCurrency(utileAziendale)}\n                />\n                <InfoBox\n                    label={`IRAP (${aliquotaIrap}%):`}\n                    value={formatCurrency(irap)}\n                />\n                <InfoBox\n                    label=\"Utile dopo IRAP:\"\n                    value={formatCurrency(utileDopoIrap)}\n                    bgColor=\"bg-green-50\"\n                />\n            </div>\n\n            <div className=\"mt-4 p-3 bg-blue-50 rounded\">\n                <p className=\"text-sm text-gray-600\">\n                    <strong>Nota:</strong> L&apos;utile aziendale &egrave; calcolato sottraendo dal fatturato i costi base e solo i costi esenti dei soci operativi.\n                    La parte non esente di buoni pasto e trasferte &egrave; invece considerata come parte del reddito imponibile dei singoli soci.\n                </p>\n            </div>\n        </Card>\n    );\n};\n\nexport default AziendaForm;","import React from 'react';\n\n/**\n * Form per i dettagli del socio\n */\nconst SocioForm = ({ socio, updateSocio, rimuoviSocio }) => {\n    return (\n        <div className=\"mb-6 p-4 bg-white rounded-lg shadow\">\n            <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-medium\">{socio.nome}</h3>\n                <button\n                    onClick={() => rimuoviSocio(socio.id)}\n                    className=\"bg-red-500 text-white px-2 py-1 rounded text-sm hover:bg-red-600\"\n                >\n                    Rimuovi\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Nome Socio\n                    </label>\n                    <input\n                        type=\"text\"\n                        value={socio.nome}\n                        onChange={(e) => updateSocio(socio.id, 'nome', e.target.value)}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Tipo Socio\n                    </label>\n                    <select\n                        value={socio.tipo}\n                        onChange={(e) => updateSocio(socio.id, 'tipo', e.target.value)}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    >\n                        <option value=\"operativo\">Socio Operativo</option>\n                        <option value=\"capitale\">Socio di Capitale</option>\n                    </select>\n                </div>\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Percentuale di Partecipazione (%)\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"0.01\"\n                        value={socio.percentuale}\n                        onChange={(e) => updateSocio(socio.id, 'percentuale', Number(e.target.value))}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Reddito Esterno (&euro;)\n                    </label>\n                    <input\n                        type=\"number\"\n                        value={socio.redditoEsterno}\n                        onChange={(e) => updateSocio(socio.id, 'redditoEsterno', Number(e.target.value))}\n                        className=\"w-full p-2 border border-gray-300 rounded\"\n                    />\n                </div>\n                {socio.tipo === \"operativo\" && (\n                    <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                            Giornate Lavorate\n                        </label>\n                        <input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"365\"\n                            value={socio.giornateLavorate}\n                            onChange={(e) => updateSocio(socio.id, 'giornateLavorate', Number(e.target.value))}\n                            className=\"w-full p-2 border border-gray-300 rounded\"\n                        />\n                    </div>\n                )}\n            </div>\n\n            {socio.tipo === \"operativo\" && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                    <div>\n                        <label className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                            <input\n                                type=\"checkbox\"\n                                checked={socio.buoniPasto}\n                                onChange={(e) => updateSocio(socio.id, 'buoniPasto', e.target.checked)}\n                                className=\"mr-2\"\n                            />\n                            Buoni Pasto \n                        </label>\n                        {socio.buoniPasto && (\n                            <div className=\"grid grid-cols-2 gap-2\">\n                                <div>\n                                    <label className=\"block text-xs text-gray-600\">Valore (&euro;/giorno)</label>\n                                    <input\n                                        type=\"number\"\n                                        min=\"0\"\n                                        step=\"0.01\"\n                                        value={socio.valoreBuoniPasto}\n                                        onChange={(e) => updateSocio(socio.id, 'valoreBuoniPasto', Number(e.target.value))}\n                                        className=\"w-full p-2 border border-gray-300 rounded\"\n                                    />\n                                </div>\n                                <div>\n                                    <label className=\"block text-xs text-gray-600\">Esente fino a (&euro;)</label>\n                                    <input\n                                        type=\"number\"\n                                        min=\"0\"\n                                        step=\"0.01\"\n                                        value={socio.buoniPastoEsentiFino}\n                                        onChange={(e) => updateSocio(socio.id, 'buoniPastoEsentiFino', Number(e.target.value))}\n                                        className=\"w-full p-2 border border-gray-300 rounded\"\n                                    />\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                    <div>\n                        <label className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                            <input\n                                type=\"checkbox\"\n                                checked={socio.trasferte}\n                                onChange={(e) => updateSocio(socio.id, 'trasferte', e.target.checked)}\n                                className=\"mr-2\"\n                            />\n                            Rimborsi Trasferta\n                        </label>\n                        {socio.trasferte && (\n                            <div className=\"grid grid-cols-3 gap-2\">\n                                <div>\n                                    <label className=\"block text-xs text-gray-600\">Giorni</label>\n                                    <input\n                                        type=\"number\"\n                                        min=\"0\"\n                                        value={socio.giorniTrasferta}\n                                        onChange={(e) => updateSocio(socio.id, 'giorniTrasferta', Number(e.target.value))}\n                                        className=\"w-full p-2 border border-gray-300 rounded\"\n                                    />\n                                </div>\n                                <div>\n                                    <label className=\"block text-xs text-gray-600\">&euro;/giorno</label>\n                                    <input\n                                        type=\"number\"\n                                        min=\"0\"\n                                        step=\"0.01\"\n                                        value={socio.importoTrasfertaGiorno}\n                                        onChange={(e) => updateSocio(socio.id, 'importoTrasfertaGiorno', Number(e.target.value))}\n                                        className=\"w-full p-2 border border-gray-300 rounded\"\n                                    />\n                                </div>\n                                <div>\n                                    <label className=\"block text-xs text-gray-600\">Esente fino a (&euro;)</label>\n                                    <input\n                                        type=\"number\"\n                                        min=\"0\"\n                                        step=\"0.01\"\n                                        value={socio.trasfertaEsenteFino}\n                                        onChange={(e) => updateSocio(socio.id, 'trasfertaEsenteFino', Number(e.target.value))}\n                                        className=\"w-full p-2 border border-gray-300 rounded\"\n                                    />\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SocioForm;","import React from 'react';\nimport SocioForm from './SocioForm';\nimport { creaNuovoSocio } from './utils';\n\n/**\n * Componente per la gestione dei soci\n */\nconst SocioList = ({ soci, setSoci, totalPercentuale }) => {\n    const aggiungiSocio = () => {\n        const nuovoSocio = creaNuovoSocio(\n            soci.length > 0 ? Math.max(...soci.map(s => s.id)) + 1 : 1\n        );\n        setSoci([...soci, nuovoSocio]);\n    };\n\n    const rimuoviSocio = (id) => {\n        setSoci(soci.filter(socio => socio.id !== id));\n    };\n\n    const updateSocio = (id, campo, valore) => {\n        setSoci(soci.map(socio => {\n            if (socio.id === id) {\n                return { ...socio, [campo]: valore };\n            }\n            return socio;\n        }));\n    };\n\n    return (\n        <div className=\"mb-6\">\n            <div className=\"flex justify-between items-center mb-2\">\n                <h2 className=\"text-xl font-semibold\">Soci</h2>\n                <button\n                    onClick={aggiungiSocio}\n                    className=\"bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600\"\n                >\n                    Aggiungi Socio\n                </button>\n            </div>\n\n            {totalPercentuale !== 100 && (\n                <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-2 rounded mb-4\">\n                    Attenzione: La somma delle percentuali di partecipazione &egrave; {totalPercentuale}%. Il totale deve essere 100%.\n                </div>\n            )}\n\n            {soci.map((socio) => (\n                <SocioForm\n                    key={socio.id}\n                    socio={socio}\n                    updateSocio={updateSocio}\n                    rimuoviSocio={rimuoviSocio}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default SocioList;","import React from 'react';\nimport InfoBox from '../UI/InfoBox';\nimport { formatCurrency } from './utils';\n\n/**\n * Componente per visualizzare i risultati di un socio\n */\nconst SocioResults = ({ risultato }) => {\n    const {\n        socio,\n        quotaUtile,\n        importoBuoniPasto,\n        importoBuoniPastoEsenti,\n        importoBuoniPastoNonEsenti,\n        importoTrasferte,\n        importoTrasferteEsenti,\n        importoTrasferteNonEsenti,\n        contributiInps,\n        redditoImponibileTotale,\n        irpef,\n        addizionaleRegionale,\n        addizionaleComunale,\n        totaleImposte,\n        nettoPercepito\n    } = risultato;\n\n    return (\n        <div className=\"mb-6 p-4 bg-white rounded-lg shadow\">\n            <h3 className=\"text-lg font-medium mb-2 border-b pb-2\">\n                {socio.nome} - {socio.tipo === \"operativo\" ? \"Socio Operativo\" : \"Socio di Capitale\"} ({socio.percentuale}%)\n            </h3>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                <InfoBox\n                    label=\"Quota Utile:\"\n                    value={formatCurrency(quotaUtile)}\n                />\n\n                {socio.tipo === \"operativo\" && (\n                    <>\n                        <InfoBox\n                            label=\"Buoni Pasto Totali:\"\n                            value={formatCurrency(importoBuoniPasto)}\n                        />\n                        <InfoBox\n                            label=\"Rimborsi Trasferta Totali:\"\n                            value={formatCurrency(importoTrasferte)}\n                        />\n                    </>\n                )}\n            </div>\n\n            {socio.tipo === \"operativo\" && importoBuoniPasto > 0 && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                    <InfoBox\n                        label=\"Buoni Pasto Esenti:\"\n                        value={formatCurrency(importoBuoniPastoEsenti)}\n                        bgColor=\"bg-green-50\"\n                    />\n                    <InfoBox\n                        label=\"Buoni Pasto Non Esenti:\"\n                        value={formatCurrency(importoBuoniPastoNonEsenti)}\n                        bgColor=\"bg-yellow-50\"\n                    />\n                </div>\n            )}\n\n            {socio.tipo === \"operativo\" && importoTrasferte > 0 && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                    <InfoBox\n                        label=\"Trasferte Esenti:\"\n                        value={formatCurrency(importoTrasferteEsenti)}\n                        bgColor=\"bg-green-50\"\n                    />\n                    <InfoBox\n                        label=\"Trasferte Non Esenti:\"\n                        value={formatCurrency(importoTrasferteNonEsenti)}\n                        bgColor=\"bg-yellow-50\"\n                    />\n                </div>\n            )}\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                <InfoBox\n                    label=\"Reddito Imponibile Totale:\"\n                    value={formatCurrency(redditoImponibileTotale)}\n                    bgColor=\"bg-blue-50\"\n                />\n                <InfoBox\n                    label=\"Contributi INPS:\"\n                    value={formatCurrency(contributiInps)}\n                    bgColor=\"bg-yellow-50\"\n                />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                <InfoBox\n                    label=\"IRPEF:\"\n                    value={formatCurrency(irpef)}\n                    bgColor=\"bg-yellow-50\"\n                />\n                <InfoBox\n                    label=\"Addizionale Regionale:\"\n                    value={formatCurrency(addizionaleRegionale)}\n                    bgColor=\"bg-yellow-50\"\n                />\n                <InfoBox\n                    label=\"Addizionale Comunale:\"\n                    value={formatCurrency(addizionaleComunale)}\n                    bgColor=\"bg-yellow-50\"\n                />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <InfoBox\n                    label=\"Totale Imposte:\"\n                    value={formatCurrency(totaleImposte)}\n                    bgColor=\"bg-red-50\"\n                />\n                <InfoBox\n                    label=\"Netto Percepito:\"\n                    value={formatCurrency(nettoPercepito)}\n                    bgColor=\"bg-green-50\"\n                />\n            </div>\n\n            {socio.tipo === \"operativo\" && (\n                <div className=\"mt-3 text-xs text-gray-600 bg-gray-50 p-2 rounded\">\n                    <p>Il netto percepito include: la quota di utile al netto delle imposte, pi&ugrave; la parte esente di buoni pasto e trasferte.</p>\n                    <p>La parte non esente &egrave; inclusa nel reddito imponibile e quindi gi&agrave; considerata nel calcolo delle imposte.</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SocioResults;","import React from 'react';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport Card from '../UI/Card';\nimport { formatCurrency } from './utils';\n\n/**\n * Componente per i grafici a torta e tabella riepilogativa\n */\nconst ReportCharts = ({\n    fatturato,\n    costi,\n    costiSociOperativi,\n    costiEsenti,\n    costiNonEsenti,\n    utileAziendale,\n    irap,\n    utileDopoIrap,\n    risultatiSoci\n}) => {\n    return (\n        <Card title=\"Report Grafico\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                    <h3 className=\"text-lg font-medium mb-3\">Ripartizione Aziendale</h3>\n                    <div style={{ width: '100%', height: 300 }}>\n                        <ResponsiveContainer>\n                            <PieChart>\n                                <Pie\n                                    data={[\n                                        { name: 'Costi Base', value: costi },\n                                        { name: 'Costi Soci (Esenti)', value: costiEsenti },\n                                        { name: 'Costi Soci (Non Esenti)', value: costiNonEsenti },\n                                        { name: 'IRAP', value: irap },\n                                        { name: 'Utile Netto', value: utileDopoIrap }\n                                    ]}\n                                    cx=\"50%\"\n                                    cy=\"50%\"\n                                    labelLine={true}\n                                    outerRadius={80}\n                                    fill=\"#8884d8\"\n                                    dataKey=\"value\"\n                                    nameKey=\"name\"\n                                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                                >\n                                    <Cell fill=\"#FF8042\" />\n                                    <Cell fill=\"#00C49F\" />\n                                    <Cell fill=\"#FFBB28\" />\n                                    <Cell fill=\"#FF0000\" />\n                                    <Cell fill=\"#0088FE\" />\n                                </Pie>\n                                <Tooltip formatter={(value) => formatCurrency(value)} />\n                                <Legend />\n                            </PieChart>\n                        </ResponsiveContainer>\n                    </div>\n                </div>\n\n                <div>\n                    <h3 className=\"text-lg font-medium mb-3\">Ripartizione delle Quote</h3>\n                    <div style={{ width: '100%', height: 300 }}>\n                        <ResponsiveContainer>\n                            <PieChart>\n                                <Pie\n                                    data={risultatiSoci.map(risultato => ({\n                                        name: risultato.socio.nome,\n                                        value: risultato.quotaUtile,\n                                        tipo: risultato.socio.tipo\n                                    }))}\n                                    cx=\"50%\"\n                                    cy=\"50%\"\n                                    labelLine={true}\n                                    outerRadius={80}\n                                    fill=\"#8884d8\"\n                                    dataKey=\"value\"\n                                    nameKey=\"name\"\n                                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                                >\n                                    {risultatiSoci.map((entry, index) => (\n                                        <Cell key={`cell-${index}`} fill={entry.socio.tipo === 'operativo' ? '#0088FE' : '#00C49F'} />\n                                    ))}\n                                </Pie>\n                                <Tooltip formatter={(value) => formatCurrency(value)} />\n                                <Legend />\n                            </PieChart>\n                        </ResponsiveContainer>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"mt-4\">\n                <h3 className=\"text-lg font-medium mb-3\">Dettaglio Fiscale</h3>\n                <div className=\"overflow-x-auto\">\n                    <table className=\"min-w-full divide-y divide-gray-200\">\n                        <thead className=\"bg-gray-50\">\n                            <tr>\n                                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Voce</th>\n                                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Importo</th>\n                                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Percentuale</th>\n                            </tr>\n                        </thead>\n                        <tbody className=\"bg-white divide-y divide-gray-200\">\n                            <tr>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Fatturato</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{formatCurrency(fatturato)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">100%</td>\n                            </tr>\n                            <tr>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Costi Base</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{formatCurrency(costi)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{((costi / fatturato) * 100).toFixed(2)}%</td>\n                            </tr>\n                            <tr>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Costi Soci Operativi (Esenti)</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{formatCurrency(costiEsenti)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{((costiEsenti / fatturato) * 100).toFixed(2)}%</td>\n                            </tr>\n                            <tr>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Costi Soci Operativi (Non Esenti)</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{formatCurrency(costiNonEsenti)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{((costiNonEsenti / fatturato) * 100).toFixed(2)}%</td>\n                            </tr>\n                            <tr>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Utile Aziendale</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{formatCurrency(utileAziendale)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{((utileAziendale / fatturato) * 100).toFixed(2)}%</td>\n                            </tr>\n                            <tr>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">IRAP</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{formatCurrency(irap)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{((irap / fatturato) * 100).toFixed(2)}%</td>\n                            </tr>\n                            <tr className=\"bg-green-50\">\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Utile dopo IRAP</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-semibold\">{formatCurrency(utileDopoIrap)}</td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-semibold\">{((utileDopoIrap / fatturato) * 100).toFixed(2)}%</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <div className=\"mt-4 p-3 bg-blue-50 rounded\">\n                <p className=\"text-sm\">\n                    <strong>Nota fiscale:</strong> I costi non esenti (parte eccedente le soglie di esenzione di buoni pasto e trasferte)\n                    sono considerati reddito del socio e non riducono l'utile aziendale. Questo riflette il trattamento fiscale corretto\n                    secondo la normativa italiana.\n                </p>\n            </div>\n        </Card>\n    );\n};\n\nexport default ReportCharts;","import React from 'react';\nimport { formatCurrency } from '../../components/SASTaxSimulator/utils';\n\n/**\n * Barra laterale riepilogativa \n * Visibile solo su schermi PC\n */\nconst Sidebar = ({\n    fatturato,\n    costi,\n    costiSociOperativi,\n    costiEsenti,\n    costiNonEsenti,\n    utileAziendale,\n    irap,\n    utileDopoIrap,\n    soci,\n    risultatiSoci\n}) => {\n    const totaleImposte = risultatiSoci.reduce((acc, r) => acc + r.totaleImposte, 0);\n    const totaleNettoPercepito = risultatiSoci.reduce((acc, r) => acc + r.nettoPercepito, 0);\n\n    return (\n        <div className=\"hidden 2xl:block fixed right-4 top-4 w-64 bg-white shadow-lg rounded-lg p-4 border-l-4 border-blue-500 h-[calc(100vh-2rem)] overflow-y-auto\">\n            <h3 className=\"text-lg font-semibold text-blue-800 mb-4 border-b pb-2\">Riepilogo Simulazione</h3>\n\n            <div className=\"space-y-4\">\n                <div className=\"bg-blue-50 p-3 rounded\">\n                    <h4 className=\"font-medium text-sm text-gray-600\">Dati Aziendali</h4>\n                    <ul className=\"mt-2 space-y-1 text-sm\">\n                        <li className=\"flex justify-between\">\n                            <span>Fatturato:</span>\n                            <span className=\"font-medium\">{formatCurrency(fatturato)}</span>\n                        </li>\n                        <li className=\"flex justify-between\">\n                            <span>Costi base:</span>\n                            <span className=\"font-medium\">{formatCurrency(costi)}</span>\n                        </li>\n                        <li className=\"flex justify-between\">\n                            <span>Costi soci (totali):</span>\n                            <span className=\"font-medium\">{formatCurrency(costiSociOperativi)}</span>\n                        </li>\n                        <li className=\"flex justify-between text-green-600\">\n                            <span>- di cui deducibili:</span>\n                            <span className=\"font-medium\">{formatCurrency(costiEsenti)}</span>\n                        </li>\n                        <li className=\"flex justify-between text-yellow-600\">\n                            <span>- di cui non deducibili:</span>\n                            <span className=\"font-medium\">{formatCurrency(costiNonEsenti)}</span>\n                        </li>\n                        <li className=\"flex justify-between\">\n                            <span>Utile:</span>\n                            <span className=\"font-medium\">{formatCurrency(utileAziendale)}</span>\n                        </li>\n                        <li className=\"flex justify-between\">\n                            <span>IRAP:</span>\n                            <span className=\"font-medium\">{formatCurrency(irap)}</span>\n                        </li>\n                        <li className=\"flex justify-between font-semibold text-green-700\">\n                            <span>Utile netto:</span>\n                            <span>{formatCurrency(utileDopoIrap)}</span>\n                        </li>\n                    </ul>\n                </div>\n\n                <div className=\"bg-gray-50 p-3 rounded\">\n                    <h4 className=\"font-medium text-sm text-gray-600\">Soci ({soci.length})</h4>\n                    <ul className=\"mt-2 space-y-2 text-sm\">\n                        {risultatiSoci.map((risultato, index) => (\n                            <li key={index} className=\"border-b pb-1 last:border-b-0\">\n                                <div className=\"font-medium flex justify-between\">\n                                    <span>{risultato.socio.nome}</span>\n                                    <span className=\"text-xs bg-blue-100 text-blue-800 px-1 rounded\">\n                                        {risultato.socio.tipo === 'operativo' ? 'Operativo' : 'Capitale'}\n                                    </span>\n                                </div>\n                                <div className=\"text-xs flex justify-between mt-1\">\n                                    <span>Quota {risultato.socio.percentuale}%:</span>\n                                    <span>{formatCurrency(risultato.quotaUtile)}</span>\n                                </div>\n                                {risultato.socio.tipo === 'operativo' && (\n                                    <>\n                                        {risultato.importoBuoniPastoEsenti + risultato.importoTrasferteEsenti > 0 && (\n                                            <div className=\"text-xs flex justify-between\">\n                                                <span>Esenti:</span>\n                                                <span className=\"text-green-600\">\n                                                    {formatCurrency(risultato.importoBuoniPastoEsenti + risultato.importoTrasferteEsenti)}\n                                                </span>\n                                            </div>\n                                        )}\n                                        {risultato.importoBuoniPastoNonEsenti + risultato.importoTrasferteNonEsenti > 0 && (\n                                            <div className=\"text-xs flex justify-between\">\n                                                <span>Non esenti:</span>\n                                                <span className=\"text-yellow-600\">\n                                                    {formatCurrency(risultato.importoBuoniPastoNonEsenti + risultato.importoTrasferteNonEsenti)}\n                                                </span>\n                                            </div>\n                                        )}\n                                    </>\n                                )}\n                                <div className=\"text-xs flex justify-between\">\n                                    <span>Imposte:</span>\n                                    <span className=\"text-red-600\">{formatCurrency(risultato.totaleImposte)}</span>\n                                </div>\n                                <div className=\"text-xs flex justify-between\">\n                                    <span>Netto:</span>\n                                    <span className=\"text-green-600\">{formatCurrency(risultato.quotaUtile - risultato.totaleImposte)}</span>\n                                </div>\n                                <div className=\"text-xs flex justify-between font-medium\">\n                                    <span>Netto Percepito:</span>\n                                    <span className=\"text-green-800\">{formatCurrency(risultato.nettoPercepito)}</span>\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n\n                <div className=\"bg-green-50 p-3 rounded\">\n                    <h4 className=\"font-medium text-sm text-gray-600\">Totali</h4>\n                    <ul className=\"mt-2 space-y-1 text-sm\">\n                        <li className=\"flex justify-between text-red-600\">\n                            <span>Imposte totali:</span>\n                            <span className=\"font-medium\">{formatCurrency(totaleImposte + irap)}</span>\n                        </li>\n                        <li className=\"flex justify-between text-green-600 font-semibold\">\n                            <span>Netto totale:</span>\n                            <span>{formatCurrency(totaleNettoPercepito)}</span>\n                        </li>\n                        <li className=\"flex justify-between mt-2 pt-2 border-t text-xs\">\n                            <span>Pressione fiscale:</span>\n                            <span>{(((totaleImposte + irap) / (fatturato - costi)) * 100).toFixed(1)}%</span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n\n            <div className=\"mt-4 text-center text-xs text-gray-500\">\n                2025 Key-Code\n            </div>\n        </div>\n    );\n};\n\nexport default Sidebar;","/**\n * Utility per il salvataggio automatico dei dati dell'applicazione\n * Questo modulo implementa una soluzione robusta per salvare e recuperare\n * automaticamente i dati di configurazione del simulatore SAS\n */\nimport { setCookie, getCookie, deleteCookie } from './cookieUtils';\n// Chiave usata per salvare i dati nel localStorage\nconst STORAGE_KEY = 'sas-simulator-data';\n\n\nexport const saveAutoData = (data) => {\n    try {\n        // Prova a salvare i dati nel cookie\n        const success = setCookie(STORAGE_KEY, data, 30); // Salva per 30 giorni\n        if (success) {\n            console.log('Dati salvati con successo nel cookie');\n            return true;\n        } else {\n            console.error('Errore durante il salvataggio dei dati nel cookie');\n        }\n    } catch (error) {\n        console.error('Errore durante il salvataggio dei dati nel cookie:', error);\n    }\n\n};\n\nexport const loadAutoData = () => {\n    try {\n        // Prova a recuperare i dati dal cookie\n        const data = getCookie(STORAGE_KEY);\n        if (data) {\n            return data;\n        } else {\n            console.warn('Nessun dato trovato nel cookie');\n            return null;\n        }\n    }\n        catch (error) {\n            console.error('Errore durante il recupero dei dati dal cookie:', error);\n            return null;\n        }\n\n};\n\nexport const deleteAutoData = () => {\n    try {\n        // Prova a eliminare i dati dal cookie\n        deleteCookie(STORAGE_KEY);\n        console.log('Dati eliminati con successo dal cookie');\n    } catch (error) {\n        console.error('Errore durante l\\'eliminazione dei dati dal cookie:', error);\n    }\n};\n\n\n\n\n\n\n","/**\n * Utility per la gestione dei cookie\n */\n\n/**\n * Imposta un cookie con i dati specificati\n * @param {string} name - Nome del cookie\n * @param {object} value - Valore da salvare (verr� convertito in JSON)\n * @param {number} days - Giorni di validit� del cookie (default: 30)\n */\nexport const setCookie = (name, value, days = 30) => {\n    try {\n        // Converti l'oggetto in una stringa JSON\n        const jsonValue = JSON.stringify(value);\n\n        // Calcola la data di scadenza\n        const d = new Date();\n        d.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));\n\n        // Imposta il cookie\n        document.cookie = `${name}=${encodeURIComponent(jsonValue)};expires=${d.toUTCString()};path=/`;\n\n        return true;\n    } catch (error) {\n        console.error('Errore durante il salvataggio del cookie:', error);\n        return false;\n    }\n};\n\n/**\n * Ottiene il valore di un cookie\n * @param {string} name - Nome del cookie da leggere\n * @returns {object|null} - Valore del cookie o null se non trovato\n */\nexport const getCookie = (name) => {\n    try {\n        // Cerca il cookie nel documento\n        const cookieArr = document.cookie.split(\";\");\n\n        // Cerca il cookie con il nome specificato\n        for (let i = 0; i < cookieArr.length; i++) {\n            const cookiePair = cookieArr[i].split(\"=\");\n            const cookieName = cookiePair[0].trim();\n\n            if (cookieName === name) {\n                // Decodifica il valore e converte da JSON a oggetto JavaScript\n                const decodedValue = decodeURIComponent(cookiePair[1]);\n                return JSON.parse(decodedValue);\n            }\n        }\n\n        return null;\n    } catch (error) {\n        console.error('Errore durante la lettura del cookie:', error);\n        return null;\n    }\n};\n\n/**\n * Elimina un cookie\n * @param {string} name - Nome del cookie da eliminare\n */\nexport const deleteCookie = (name) => {\n    document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;\n};","import React, { useState } from 'react';\nimport { deleteAutoData } from '../../utils/autoSaveUtils';\n/**\n * Componente per i controlli di gestione della sessione\n * @param {Object} props\n * @param {Object} props.simulationData - Dati completi della simulazione\n * @param {Function} props.onReset - Funzione chiamata quando si resetta la simulazione\n * @param {Function} props.onResetComplete - Callback eseguito al completamento del reset\n */\nconst SessionControls = ({ simulationData, onReset, onResetComplete }) => {\n    const [showConfirmReset, setShowConfirmReset] = useState(false);\n    const [isExporting, setIsExporting] = useState(false);\n\n    // Gestione dell'esportazione dati in formato JSON\n    const handleExport = () => {\n        setIsExporting(true);\n\n        try {\n            // Crea un blob JSON con i dati della simulazione\n            const dataStr = JSON.stringify(simulationData, null, 2);\n            const blob = new Blob([dataStr], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n\n            // Crea e simula il click su un link di download\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = `simulazione-sas-${new Date().toISOString().split('T')[0]}.json`;\n            link.click();\n\n            URL.revokeObjectURL(url);\n        } catch (error) {\n            console.error('Errore durante l\\'esportazione dei dati:', error);\n            alert('Si � verificato un errore durante l\\'esportazione dei dati.');\n        } finally {\n            setIsExporting(false);\n        }\n    };\n\n    // Gestione del reset dei dati\n    const handleReset = () => {\n        if (showConfirmReset) {\n\n            // Nascondi il dialogo di conferma\n            setShowConfirmReset(false);\n\n            // Notifica al genitore che il reset � completato\n            if (onResetComplete) {\n\n                deleteAutoData();\n                onResetComplete();\n                // reload default data\n                onReset();\n            }\n        } else {\n            // Mostra il dialogo di conferma\n            setShowConfirmReset(true);\n        }\n    };\n\n    return (\n        <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-md py-3 px-6 flex justify-between items-center\">\n            <div className=\"flex space-x-2\">\n                <button\n                    onClick={handleExport}\n                    disabled={isExporting}\n                    className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded shadow disabled:opacity-50\"\n                >\n                    {isExporting ? 'Esportazione...' : 'Esporta Dati'}\n                </button>\n\n                <button\n                    onClick={handleReset}\n                    className={`${showConfirmReset\n                            ? 'bg-red-500 hover:bg-red-600'\n                            : 'bg-gray-500 hover:bg-gray-600'\n                        } text-white px-4 py-2 rounded shadow`}\n                >\n                    {showConfirmReset\n                        ? 'Conferma Reset'\n                        : 'Reset Dati'}\n                </button>\n            </div>\n\n            {showConfirmReset && (\n                <div className=\"text-sm text-red-500 ml-2\">\n                    Attenzione: questa operazione canceller&agrave; tutti i dati inseriti.\n                </div>\n            )}\n\n            <div className=\"text-xs text-gray-500\">\n                Versione {simulationData.versione}\n            </div>\n        </div>\n    );\n};\n\nexport default SessionControls;","import React from 'react';\nimport LoadingSpinner from './LoadingSpinner';\n\n/**\n * Componente per visualizzare un indicatore di caricamento\n * @param {Object} props - Props del componente\n * @param {number} props.progress - Percentuale di caricamento (0-100)\n * @param {string} props.message - Messaggio da mostrare durante il caricamento\n * @param {boolean} props.isIndeterminate - Se true, mostra una barra indeterminata\n * @param {string} props.type - Tipo di indicatore ('bar' o 'spinner')\n */\nconst LoadingIndicator = ({\n    progress = 0,\n    message = \"Caricamento in corso...\",\n    isIndeterminate = false,\n    type = 'bar'\n}) => {\n    return (\n        <div className=\"fixed inset-0 bg-white bg-opacity-80 flex flex-col items-center justify-center z-50\">\n            <div className=\"bg-white p-6 rounded-lg shadow-lg max-w-md w-full\">\n                <h2 className=\"text-xl font-semibold text-blue-800 mb-4 text-center\">\n                    {message}\n                </h2>\n\n                {type === 'bar' ? (\n                    <>\n                        <div className=\"w-full h-4 bg-gray-200 rounded-full overflow-hidden\">\n                            {isIndeterminate ? (\n                                <div className=\"h-full bg-blue-500 rounded-full animate-pulse\"\n                                    style={{ width: '100%' }}></div>\n                            ) : (\n                                <div className=\"h-full bg-blue-500 rounded-full transition-all duration-300\"\n                                    style={{ width: `${Math.max(5, Math.min(progress, 100))}%` }}></div>\n                            )}\n                        </div>\n\n                        {!isIndeterminate && (\n                            <div className=\"text-right mt-1 text-sm text-gray-600\">\n                                {Math.round(progress)}%\n                            </div>\n                        )}\n                    </>\n                ) : (\n                    <div className=\"flex justify-center py-4\">\n                        <LoadingSpinner size=\"large\" color=\"primary\" />\n                    </div>\n                )}\n\n                <div className=\"text-center mt-4 text-sm text-gray-500\">\n                    Simulatore Tassazione SAS | Key-Code\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default LoadingIndicator;","import React, { useState, useEffect, useCallback } from 'react';\nimport AziendaForm from './AziendaForm';\nimport SocioList from './SocioList';\nimport SocioResults from './SocioResults';\nimport ReportCharts from './ReportCharts';\nimport Sidebar from '../UI/Sidebar';\nimport SessionControls from '../UI/SessionControls';\nimport LoadingIndicator from '../UI/LoadingIndicator';\nimport {\n    calcolaCostiSociOperativi,\n    calcolaRisultatiSocio,\n    creaNuovoSocio\n} from './utils';\nimport { saveAutoData, loadAutoData, deleteAutoData } from '../../utils/autoSaveUtils';\n\n/**\n * Componente principale del simulatore di tassazione SAS\n */\nconst SASTaxSimulator = () => {\n    // Stato per i dati aziendali con valori predefiniti\n    const [fatturato, setFatturato] = useState(100000);\n    const [costi, setCosti] = useState(40000);\n    const [aliquotaIrap, setAliquotaIrap] = useState(3.9); // Default IRAP 3.9%\n    const [aliquotaInps, setAliquotaInps] = useState(23.1);\n\n    // Stato per i soci con valori predefiniti\n    const [soci, setSoci] = useState([\n        {\n            ...creaNuovoSocio(1, \"Mario Rossi\"),\n            tipo: \"operativo\",\n            percentuale: 60,\n            redditoEsterno: 0,\n            giornateLavorate: 220,\n            buoniPasto: true,\n            valoreBuoniPasto: 8,\n            buoniPastoEsentiFino: 8,\n            trasferte: true,\n            giorniTrasferta: 30,\n            importoTrasfertaGiorno: 50,\n            trasfertaEsenteFino: 46.48,\n        },\n        {\n            ...creaNuovoSocio(2, \"Giulia Bianchi\"),\n            tipo: \"capitale\",\n            percentuale: 40,\n            redditoEsterno: 30000,\n        }\n    ]);\n\n    // Configurazione degli scaglioni IRPEF\n    const [scaglioniIrpef, setScaglioniIrpef] = useState([\n        { limite: 15000, aliquota: 23 },\n        { limite: 28000, aliquota: 25 },\n        { limite: 50000, aliquota: 35 },\n        { limite: Infinity, aliquota: 43 }\n    ]);\n\n    // Aliquote addizionali\n    const [aliqRegionale, setAliqRegionale] = useState(1.73);\n    const [aliqComunale, setAliqComunale] = useState(0.8);\n\n    // Stato di inizializzazione\n    const [isInitialized, setIsInitialized] = useState(false);\n    // Stato per tenere traccia delle modifiche\n    const [hasChanges, setHasChanges] = useState(false);\n    // Stati per il caricamento\n    const [isLoading, setIsLoading] = useState(true);\n    const [loadingProgress, setLoadingProgress] = useState(0);\n    const [loadingMessage, setLoadingMessage] = useState('Inizializzazione del simulatore...');\n    // Stato per il reset\n    const [isResetting, setIsResetting] = useState(false);\n\n    // Funzione per impostare i valori predefiniti\n    const setDefaultValues = useCallback(() => {\n        setFatturato(100000);\n        setCosti(40000);\n        setAliquotaIrap(3.9);\n        setAliquotaInps(23.1);\n        setSoci([\n            {\n                ...creaNuovoSocio(1, \"Mario Rossi\"),\n                tipo: \"operativo\",\n                percentuale: 60,\n                redditoEsterno: 0,\n                giornateLavorate: 220,\n                buoniPasto: true,\n                valoreBuoniPasto: 8,\n                buoniPastoEsentiFino: 8,\n                trasferte: true,\n                giorniTrasferta: 30,\n                importoTrasfertaGiorno: 50,\n                trasfertaEsenteFino: 46.48,\n            },\n            {\n                ...creaNuovoSocio(2, \"Giulia Bianchi\"),\n                tipo: \"capitale\",\n                percentuale: 40,\n                redditoEsterno: 30000,\n            }\n        ]);\n        setScaglioniIrpef([\n            { limite: 15000, aliquota: 23 },\n            { limite: 28000, aliquota: 25 },\n            { limite: 50000, aliquota: 35 },\n            { limite: Infinity, aliquota: 43 }\n        ]);\n        setAliqRegionale(1.73);\n        setAliqComunale(0.8);\n    }, []);\n\n    // Funzione per raccogliere tutti i dati correnti\n    const collectCurrentData = useCallback(() => {\n        return {\n            fatturato,\n            costi,\n            aliquotaIrap,\n            aliquotaInps,\n            soci,\n            scaglioniIrpef,\n            aliqRegionale,\n            aliqComunale\n        };\n    }, [fatturato, costi, aliquotaIrap, aliquotaInps, soci, scaglioniIrpef, aliqRegionale, aliqComunale]);\n\n    // Funzione per gestire il reset\n    const handleReset = useCallback(() => {\n        // Imposta immediatamente lo stato di reset e loading\n        setIsResetting(true);\n        setIsLoading(true);\n        setLoadingMessage('Reset in corso...');\n        setLoadingProgress(0);\n\n        // Avvia la simulazione del progresso\n        const progressInterval = setInterval(() => {\n            setLoadingProgress(prev => {\n                if (prev >= 90) {\n                    clearInterval(progressInterval);\n                    return prev;\n                }\n                return prev + 5;\n            });\n        }, 50);\n\n        // Esegue il reset effettivo con un piccolo ritardo per mostrare l'UI\n        setTimeout(() => {\n            try {\n                // Pulisci i dati salvati\n                const resetSuccess = deleteAutoData();\n\n                if (resetSuccess) {\n                    setLoadingMessage('Ripristino valori predefiniti...');\n                    setLoadingProgress(95);\n\n                    // Ripristina i valori predefiniti\n                    setDefaultValues();\n\n                    console.log('Reset completato con successo');\n                } else {\n                    setLoadingMessage('Errore durante il reset. Ripristino valori predefiniti...');\n                    console.error('Errore durante il reset dei dati');\n\n                    // Comunque ripristina i valori predefiniti\n                    setDefaultValues();\n                }\n\n                // Completa il processo di reset\n                setLoadingProgress(100);\n                setTimeout(() => {\n                    setIsLoading(false);\n                    setIsResetting(false);\n                    setHasChanges(false); // Resetta anche lo stato delle modifiche\n                    setIsInitialized(true); // Assicurati che il componente sia ancora inizializzato\n                }, 500);\n\n            } catch (error) {\n                console.error('Errore critico durante il reset:', error);\n                setLoadingMessage('Si � verificato un errore. Ripristino forzato...');\n\n                // In caso di errore, comunque ripristina i valori predefiniti\n                setDefaultValues();\n\n                setTimeout(() => {\n                    setIsLoading(false);\n                    setIsResetting(false);\n                    setIsInitialized(true);\n                }, 1000);\n            } finally {\n                clearInterval(progressInterval);\n            }\n        }, 500);\n\n        // Restituisci true per indicare che il reset � stato avviato\n        return true;\n    }, [setDefaultValues]);\n\n    // Caricamento dati all'avvio\n    useEffect(() => {\n        const loadSavedData = () => {\n            try {\n                setIsLoading(true);\n                setLoadingMessage('Caricamento dati salvati...');\n                setLoadingProgress(10);\n\n                // Simula progressi graduali del caricamento\n                const progressInterval = setInterval(() => {\n                    setLoadingProgress(prev => {\n                        if (prev >= 90) {\n                            clearInterval(progressInterval);\n                            return prev;\n                        }\n                        return prev + 5;\n                    });\n                }, 100);\n\n                setTimeout(() => {\n                    const savedData = loadAutoData();\n                    setLoadingProgress(95);\n\n                    if (savedData) {\n                        setLoadingMessage('Elaborazione dati...');\n\n                        // Carica i dati salvati se disponibili\n                        if (savedData.fatturato !== undefined) setFatturato(Number(savedData.fatturato));\n                        if (savedData.costi !== undefined) setCosti(Number(savedData.costi));\n                        if (savedData.aliquotaIrap !== undefined) setAliquotaIrap(Number(savedData.aliquotaIrap));\n                        if (savedData.aliquotaInps !== undefined) setAliquotaInps(Number(savedData.aliquotaInps));\n\n                        if (savedData.soci && Array.isArray(savedData.soci)) {\n                            // Assicuriamoci che tutti i soci abbiano un ID valido\n                            const validSoci = savedData.soci.map((socio, index) => ({\n                                ...socio,\n                                id: socio.id || index + 1\n                            }));\n                            setSoci(validSoci);\n                        }\n\n                        if (savedData.scaglioniIrpef && Array.isArray(savedData.scaglioniIrpef)) {\n                            setScaglioniIrpef(savedData.scaglioniIrpef);\n                        }\n\n                        if (savedData.aliqRegionale !== undefined) setAliqRegionale(Number(savedData.aliqRegionale));\n                        if (savedData.aliqComunale !== undefined) setAliqComunale(Number(savedData.aliqComunale));\n\n                        console.log('Dati caricati con successo.');\n                    } else {\n                        setLoadingMessage('Configurazione predefinita...');\n                        console.log('Nessun dato salvato trovato, utilizzo valori predefiniti.');\n                    }\n\n                    setLoadingProgress(100);\n\n                    // Imposta lo stato di inizializzazione\n                    setTimeout(() => {\n                        setIsInitialized(true);\n                        setIsLoading(false);\n                        clearInterval(progressInterval);\n                    }, 500);\n                }, 800);\n            } catch (error) {\n                console.error('Errore durante il caricamento dei dati:', error);\n                setLoadingMessage('Si � verificato un errore. Utilizzo valori predefiniti...');\n                // In caso di errore, manteniamo i valori predefiniti\n\n                // Anche in caso di errore, terminiamo il caricamento dopo un certo tempo\n                setTimeout(() => {\n                    setIsInitialized(true);\n                    setIsLoading(false);\n                }, 1500);\n            }\n        };\n\n        loadSavedData();\n    }, []);\n\n    // Salvataggio automatico quando cambiano i dati (ma solo dopo l'inizializzazione)\n    useEffect(() => {\n        // Non salviamo durante l'inizializzazione o il reset per evitare di sovrascrivere i dati\n        if (!isInitialized || isResetting) return;\n\n        // Segnala che ci sono modifiche da salvare\n        setHasChanges(true);\n    }, [fatturato, costi, aliquotaIrap, aliquotaInps, soci, scaglioniIrpef, aliqRegionale, aliqComunale, isInitialized, isResetting]);\n\n    // Effettua il salvataggio dopo un breve ritardo dall'ultima modifica\n    useEffect(() => {\n        if (!hasChanges || !isInitialized || isResetting) return;\n\n        const saveTimeout = setTimeout(() => {\n            const currentData = collectCurrentData();\n            const saveResult = saveAutoData(currentData);\n\n            if (saveResult) {\n                console.log('Salvataggio automatico completato:', new Date().toLocaleTimeString());\n                setHasChanges(false);\n            } else {\n                console.warn('Salvataggio automatico non riuscito');\n            }\n        }, 1000); // Attende 1 secondo dall'ultima modifica prima di salvare\n\n        // Pulizia del timeout se i dati cambiano nuovamente prima del salvataggio\n        return () => clearTimeout(saveTimeout);\n    }, [hasChanges, isInitialized, isResetting, collectCurrentData]);\n\n    // Calcola i costi per soci operativi con dettaglio esente/non esente\n    const costiInfo = calcolaCostiSociOperativi(soci);\n    const costiSociOperativi = costiInfo.totale;\n\n    // Estrae il dettaglio dei costi non esenti che impattano sull'utile aziendale\n    const costiNonEsenti = costiInfo.dettaglio.buoniPastoNonEsenti + costiInfo.dettaglio.trasferteNonEsenti;\n\n    // Calcola l'utile aziendale considerando i costi per soci operativi, ma solo la parte esente\n    // La parte non esente impatta sull'imponibile del socio ma non sull'utile aziendale\n    const utileAziendale = fatturato - costi - costiSociOperativi + costiNonEsenti;\n\n    // Calcola IRAP\n    const irap = utileAziendale * (aliquotaIrap / 100);\n\n    // Utile dopo IRAP\n    const utileDopoIrap = utileAziendale - irap;\n\n    // Percentuale totale di partecipazione\n    const totalPercentuale = soci.reduce((acc, socio) => acc + Number(socio.percentuale), 0);\n\n    // Calcola risultati per ciascun socio\n    const risultatiSoci = soci.map(socio =>\n        calcolaRisultatiSocio(\n            socio,\n            utileDopoIrap,\n            aliquotaInps,\n            scaglioniIrpef,\n            aliqRegionale,\n            aliqComunale\n        )\n    );\n\n    // Dati completi della simulazione (per export)\n    const simulationData = {\n        datiAzienda: {\n            fatturato,\n            costi,\n            aliquotaIrap,\n            aliquotaInps,\n            costiSociOperativi,\n            costiEsenti: costiSociOperativi - costiNonEsenti,\n            costiNonEsenti,\n            utileAziendale,\n            irap,\n            utileDopoIrap\n        },\n        tassazione: {\n            scaglioniIrpef,\n            aliqRegionale,\n            aliqComunale\n        },\n        soci,\n        risultati: risultatiSoci,\n        dataSimulazione: new Date().toISOString(),\n        versione: \"1.0.0\"\n    };\n\n    return (\n        <div className=\"p-6 max-w-6xl mx-auto bg-gray-50 relative pb-16\">\n            {(isLoading || isResetting) && (\n                <LoadingIndicator\n                    progress={loadingProgress}\n                    message={loadingMessage}\n                />\n            )}\n\n            <h1 className=\"text-2xl font-bold mb-6 text-blue-800\">Simulatore Tassazione SAS</h1>\n\n            {/* Indicatore di salvataggio automatico */}\n            {hasChanges && isInitialized && !isResetting && (\n                <div className=\"fixed top-4 right-4 bg-yellow-100 text-yellow-800 px-3 py-1 rounded text-sm shadow-md z-50\">\n                    Salvataggio in corso...\n                </div>\n            )}\n\n            <AziendaForm\n                fatturato={fatturato}\n                setFatturato={setFatturato}\n                costi={costi}\n                setCosti={setCosti}\n                aliquotaIrap={aliquotaIrap}\n                setAliquotaIrap={setAliquotaIrap}\n                aliquotaInps={aliquotaInps}\n                setAliquotaInps={setAliquotaInps}\n                utileAziendale={utileAziendale}\n                irap={irap}\n                utileDopoIrap={utileDopoIrap}\n                costiSociOperativi={costiSociOperativi}\n                costiEsenti={costiSociOperativi - costiNonEsenti}\n                costiNonEsenti={costiNonEsenti}\n            />\n\n            <SocioList\n                soci={soci}\n                setSoci={setSoci}\n                totalPercentuale={totalPercentuale}\n            />\n\n            <div className=\"mb-6\">\n                <h2 className=\"text-xl font-semibold mb-4\">Risultati</h2>\n\n                {risultatiSoci.map((risultato, index) => (\n                    <SocioResults key={index} risultato={risultato} />\n                ))}\n            </div>\n\n            <ReportCharts\n                fatturato={fatturato}\n                costi={costi}\n                costiSociOperativi={costiSociOperativi}\n                costiEsenti={costiSociOperativi - costiNonEsenti}\n                costiNonEsenti={costiNonEsenti}\n                utileAziendale={utileAziendale}\n                irap={irap}\n                utileDopoIrap={utileDopoIrap}\n                risultatiSoci={risultatiSoci}\n            />\n\n            <div className=\"text-sm text-gray-500 mt-8\">\n                <p>Disclaimer: Questo simulatore fornisce una stima indicativa. Per calcoli precisi si consiglia di consultare un commercialista.</p>\n                <p>Le aliquote IRPEF e i contributi INPS utilizzati sono configurabili ma potrebbero richiedere aggiornamenti in base alle normative vigenti.</p>\n                <p className=\"mt-4 text-center font-semibold\">2025 Key-Code. Tutti i diritti riservati.</p>\n            </div>\n\n            {/* Sidebar laterale su schermi grandi */}\n            <Sidebar\n                fatturato={fatturato}\n                costi={costi}\n                costiSociOperativi={costiSociOperativi}\n                costiEsenti={costiSociOperativi - costiNonEsenti}\n                costiNonEsenti={costiNonEsenti}\n                utileAziendale={utileAziendale}\n                irap={irap}\n                utileDopoIrap={utileDopoIrap}\n                soci={soci}\n                risultatiSoci={risultatiSoci}\n            />\n\n            {/* Controlli per la sessione */}\n            <SessionControls\n                simulationData={simulationData}\n                onReset={handleReset}\n                onResetComplete={() => {\n                    // Eventuali operazioni aggiuntive da eseguire al completamento del reset\n                    console.log('Reset completato e UI aggiornata');\n                }}\n            />\n        </div>\n    );\n};\n\nexport default SASTaxSimulator;"],"names":["_ref","title","children","className","_jsxs","_jsx","label","value","bgColor","formatCurrency","Intl","NumberFormat","style","currency","format","creaNuovoSocio","id","nome","arguments","length","undefined","tipo","percentuale","redditoEsterno","giornateLavorate","buoniPasto","valoreBuoniPasto","buoniPastoEsentiFino","trasferte","giorniTrasferta","importoTrasfertaGiorno","trasfertaEsenteFino","calcolaIrpef","reddito","fatturato","setFatturato","costi","setCosti","aliquotaIrap","setAliquotaIrap","aliquotaInps","setAliquotaInps","utileAziendale","irap","utileDopoIrap","costiSociOperativi","costiEsenti","costiNonEsenti","Card","type","onChange","e","Number","target","min","max","step","InfoBox","socio","updateSocio","rimuoviSocio","onClick","checked","soci","setSoci","totalPercentuale","filter","campo","valore","map","aggiungiSocio","nuovoSocio","Math","s","SocioForm","risultato","quotaUtile","importoBuoniPasto","importoBuoniPastoEsenti","importoBuoniPastoNonEsenti","importoTrasferte","importoTrasferteEsenti","importoTrasferteNonEsenti","contributiInps","redditoImponibileTotale","irpef","addizionaleRegionale","addizionaleComunale","totaleImposte","nettoPercepito","_Fragment","risultatiSoci","width","height","ResponsiveContainer","PieChart","Pie","data","name","cx","cy","labelLine","outerRadius","fill","dataKey","nameKey","_ref2","percent","toFixed","Cell","Tooltip","formatter","Legend","_ref3","entry","index","scope","reduce","acc","r","totaleNettoPercepito","STORAGE_KEY","saveAutoData","days","jsonValue","JSON","stringify","d","Date","setTime","getTime","document","cookie","encodeURIComponent","toUTCString","error","console","setCookie","log","loadAutoData","cookieArr","split","i","cookiePair","trim","decodedValue","decodeURIComponent","parse","getCookie","warn","deleteAutoData","simulationData","onReset","onResetComplete","showConfirmReset","setShowConfirmReset","useState","isExporting","setIsExporting","handleExport","dataStr","blob","Blob","url","URL","createObjectURL","link","createElement","href","download","toISOString","click","revokeObjectURL","alert","disabled","handleReset","versione","progress","message","isIndeterminate","round","LoadingSpinner","size","color","SASTaxSimulator","scaglioniIrpef","setScaglioniIrpef","limite","aliquota","Infinity","aliqRegionale","setAliqRegionale","aliqComunale","setAliqComunale","isInitialized","setIsInitialized","hasChanges","setHasChanges","isLoading","setIsLoading","loadingProgress","setLoadingProgress","loadingMessage","setLoadingMessage","isResetting","setIsResetting","setDefaultValues","useCallback","collectCurrentData","progressInterval","setInterval","prev","clearInterval","setTimeout","useEffect","loadSavedData","savedData","Array","isArray","validSoci","saveTimeout","currentData","toLocaleTimeString","clearTimeout","costiInfo","totaleCosti","costiBuoniPastoEsenti","costiBuoniPastoNonEsenti","costiTrasferteEsenti","costiTrasferteNonEsenti","forEach","totaleBuoniPasto","valoreBuonoGiornaliero","sogliaBuono","totaleTrasferte","valoreTrasferteGiornaliero","sogliaTrasferte","totale","dettaglio","buoniPastoEsenti","buoniPastoNonEsenti","trasferteEsenti","trasferteNonEsenti","calcolaCostiSociOperativi","calcolaRisultatiSocio","totaleBuoni","sogliaBuoni","calcolaContributiInps","calcolaRedditoImponibileTotale","redditoImponibile","calcolaAddizionaleComunale","datiAzienda","tassazione","risultati","dataSimulazione","LoadingIndicator","AziendaForm","SocioList","SocioResults","ReportCharts","Sidebar","SessionControls"],"sourceRoot":""}